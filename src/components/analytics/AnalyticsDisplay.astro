---
// This component renders analytics data
---

<div class="analytics-display" id="analytics-display">
  <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
    <!-- Summary Cards -->
    <div class="bg-white rounded-xl shadow-sm p-6">
      <h3 class="text-xl font-semibold text-gray-800 mb-4">Overview</h3>
      <div class="grid grid-cols-2 gap-4">
        <div class="bg-blue-50 rounded-lg p-4">
          <p class="text-sm text-gray-600">Total Page Views</p>
          <p class="text-2xl font-bold text-blue-700" id="total-views">-</p>
        </div>
        <div class="bg-green-50 rounded-lg p-4">
          <p class="text-sm text-gray-600">Unique Visitors (Today)</p>
          <p class="text-2xl font-bold text-green-700" id="unique-visitors">-</p>
        </div>
        <div class="bg-purple-50 rounded-lg p-4">
          <p class="text-sm text-gray-600">First Visit</p>
          <p class="text-md font-bold text-purple-700" id="first-visit">-</p>
        </div>
        <div class="bg-orange-50 rounded-lg p-4">
          <p class="text-sm text-gray-600">Last Visit</p>
          <p class="text-md font-bold text-orange-700" id="last-visit">-</p>
        </div>
      </div>
    </div>

    <!-- Visitor Trend Chart -->
    <div class="bg-white rounded-xl shadow-sm p-6">
      <h3 class="text-xl font-semibold text-gray-800 mb-4">Visitor Trend</h3>
      <canvas id="visitor-trend-chart" class="w-full h-64"></canvas>
    </div>
  </div>

  <!-- Popular Pages Table -->
  <div class="bg-white rounded-xl shadow-sm p-6 mb-8">
    <h3 class="text-xl font-semibold text-gray-800 mb-4">Popular Pages</h3>
    <div class="overflow-x-auto">
      <table class="min-w-full bg-white">
        <thead class="bg-gray-50">
          <tr>
            <th class="py-3 px-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Page</th>
            <th class="py-3 px-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Views</th>
            <th class="py-3 px-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">% of Total</th>
          </tr>
        </thead>
        <tbody id="popular-pages-body" class="divide-y divide-gray-200">
          <tr>
            <td class="py-4 px-4 text-sm text-gray-500">Loading...</td>
            <td class="py-4 px-4 text-sm text-gray-500">-</td>
            <td class="py-4 px-4 text-sm text-gray-500">-</td>
          </tr>
        </tbody>
      </table>
    </div>
  </div>

  <!-- Referrers Section -->
  <div class="bg-white rounded-xl shadow-sm p-6">
    <h3 class="text-xl font-semibold text-gray-800 mb-4">Top Referrers</h3>
    <div class="overflow-x-auto">
      <table class="min-w-full bg-white">
        <thead class="bg-gray-50">
          <tr>
            <th class="py-3 px-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Source</th>
            <th class="py-3 px-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Referrals</th>
          </tr>
        </thead>
        <tbody id="referrers-body" class="divide-y divide-gray-200">
          <tr>
            <td class="py-4 px-4 text-sm text-gray-500">Loading...</td>
            <td class="py-4 px-4 text-sm text-gray-500">-</td>
          </tr>
        </tbody>
      </table>
    </div>
  </div>

  <!-- Note about data -->
  <div class="mt-8 text-sm text-gray-500 bg-gray-50 rounded-lg p-4">
    <p>
      <strong>Note:</strong> This analytics data is stored locally in your browser using localStorage. 
      It does not track personal information and is not shared with any third parties.
    </p>
    <div class="mt-4 flex justify-end">
      <button id="reset-analytics" class="px-4 py-2 bg-red-50 text-red-600 rounded-lg hover:bg-red-100 transition-colors text-sm">
        Reset Analytics Data
      </button>
    </div>
  </div>
</div>

<script>
  // Try to import Chart.js, fallback to polyfill if not available
  let Chart;
  try {
    // Import the Chart.js library
    Chart = (await import('chart.js/auto')).default;
  } catch (e) {
    console.error('Error loading Chart.js, falling back to polyfill:', e);
    // Fallback to our polyfill
    Chart = (await import('../../utils/chart-polyfill.js')).default;
  }
  
  // Import the analytics utilities
  import { getAnalyticsData, clearAnalyticsData } from '../../utils/analytics.js';
  
  // Format date for display
  const formatDate = (dateString) => {
    if (!dateString) return '-';
    try {
      const date = new Date(dateString);
      return date.toLocaleDateString(undefined, { 
        year: 'numeric', 
        month: 'short', 
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      });
    } catch (e) {
      console.error('Error formatting date:', e);
      return '-';
    }
  };
  
  // Initialize the analytics display
  const initializeDisplay = () => {
    try {
      console.log('Initializing analytics display...');
      const data = getAnalyticsData();
      console.log('Analytics data:', data);
      
      // Update overview cards
      document.getElementById('total-views').textContent = data?.totalViews || 0;
      
      const today = new Date().toISOString().split('T')[0];
      const todayVisitors = data?.visitors?.[today] || [];
      document.getElementById('unique-visitors').textContent = todayVisitors.length;
      
      document.getElementById('first-visit').textContent = formatDate(data?.firstVisit);
      document.getElementById('last-visit').textContent = formatDate(data?.lastVisit);
      
      // Populate popular pages table
      const pagesBody = document.getElementById('popular-pages-body');
      pagesBody.innerHTML = '';
      
      const pageEntries = Object.entries(data?.pageViews || {});
      
      // Sort pages by view count (descending)
      pageEntries.sort((a, b) => b[1] - a[1]);
      
      if (pageEntries.length === 0) {
        const row = document.createElement('tr');
        row.innerHTML = `
          <td class="py-4 px-4 text-sm text-gray-500">No data available</td>
          <td class="py-4 px-4 text-sm text-gray-500">-</td>
          <td class="py-4 px-4 text-sm text-gray-500">-</td>
        `;
        pagesBody.appendChild(row);
      } else {
        pageEntries.forEach(([page, views]) => {
          const percentage = data?.totalViews > 0 ? ((views / data.totalViews) * 100).toFixed(1) : '0.0';
          const row = document.createElement('tr');
          row.innerHTML = `
            <td class="py-4 px-4 text-sm text-gray-800">${page}</td>
            <td class="py-4 px-4 text-sm text-gray-800">${views}</td>
            <td class="py-4 px-4 text-sm text-gray-800">${percentage}%</td>
          `;
          pagesBody.appendChild(row);
        });
      }
      
      // Populate referrers table
      const referrersBody = document.getElementById('referrers-body');
      referrersBody.innerHTML = '';
      
      const referrerEntries = Object.entries(data?.referrers || {});
      
      // Sort referrers by count (descending)
      referrerEntries.sort((a, b) => b[1] - a[1]);
      
      if (referrerEntries.length === 0) {
        const row = document.createElement('tr');
        row.innerHTML = `
          <td class="py-4 px-4 text-sm text-gray-500">No referrer data available</td>
          <td class="py-4 px-4 text-sm text-gray-500">-</td>
        `;
        referrersBody.appendChild(row);
      } else {
        referrerEntries.forEach(([referrer, count]) => {
          const row = document.createElement('tr');
          row.innerHTML = `
            <td class="py-4 px-4 text-sm text-gray-800">${referrer}</td>
            <td class="py-4 px-4 text-sm text-gray-800">${count}</td>
          `;
          referrersBody.appendChild(row);
        });
      }
      
      // Generate visitor trend chart
      const visitorTrend = getVisitorTrendData(data);
      createVisitorTrendChart(visitorTrend.dates, visitorTrend.counts);
    } catch (error) {
      console.error('Error initializing analytics display:', error);
      // Show error message to user
      document.getElementById('analytics-display').innerHTML = `
        <div class="bg-red-50 text-red-800 p-6 rounded-xl shadow-sm my-8">
          <h3 class="text-xl font-semibold mb-4">Error Loading Analytics</h3>
          <p>There was a problem loading the analytics data. Please try refreshing the page or resetting the analytics data.</p>
          <button id="error-reset-analytics" class="mt-4 px-4 py-2 bg-red-100 text-red-700 rounded-lg hover:bg-red-200 transition-colors">
            Reset Analytics Data
          </button>
        </div>
      `;
      
      // Add event listener for error reset button
      setTimeout(() => {
        const errorResetBtn = document.getElementById('error-reset-analytics');
        if (errorResetBtn) {
          errorResetBtn.addEventListener('click', () => {
            clearAnalyticsData();
            window.location.reload();
          });
        }
      }, 100);
    }
  };
  
  // Get visitor trend data for the chart
  const getVisitorTrendData = (data) => {
    try {
      const dates = [];
      const counts = [];
      
      // Get the last 7 days
      const today = new Date();
      for (let i = 6; i >= 0; i--) {
        const date = new Date(today);
        date.setDate(today.getDate() - i);
        const dateString = date.toISOString().split('T')[0];
        
        dates.push(date.toLocaleDateString(undefined, { month: 'short', day: 'numeric' }));
        const visitors = data?.visitors?.[dateString] || [];
        counts.push(visitors.length);
      }
      
      return { dates, counts };
    } catch (error) {
      console.error('Error getting visitor trend data:', error);
      return { dates: [], counts: [] };
    }
  };
  
  // Create the visitor trend chart
  const createVisitorTrendChart = (dates, counts) => {
    const ctx = document.getElementById('visitor-trend-chart');
    
    // If a chart already exists, destroy it
    if (window.visitorChart) {
      window.visitorChart.destroy();
    }
    
    window.visitorChart = new Chart(ctx, {
      type: 'line',
      data: {
        labels: dates,
        datasets: [{
          label: 'Unique Visitors',
          data: counts,
          fill: false,
          borderColor: 'rgb(75, 192, 192)',
          tension: 0.1
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: {
            display: false
          },
          tooltip: {
            callbacks: {
              footer: function(tooltipItems) {
                return 'Data stored locally';
              }
            }
          }
        },
        scales: {
          y: {
            beginAtZero: true,
            ticks: {
              precision: 0
            }
          }
        }
      }
    });
  };
  
  // Initialize when the DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    initializeDisplay();
    
    // Add event listener for reset button
    document.getElementById('reset-analytics').addEventListener('click', () => {
      if (confirm('Are you sure you want to reset all analytics data? This cannot be undone.')) {
        clearAnalyticsData();
        initializeDisplay();
        alert('Analytics data has been reset successfully.');
      }
    });
  });
</script>