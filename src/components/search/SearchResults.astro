---
import type { CollectionEntry } from 'astro:content';
import { format } from 'date-fns';

interface Props {
  results: {
    services: CollectionEntry<'services'>[];
    events: CollectionEntry<'events'>[];
    resources: CollectionEntry<'resources'>[];
  };
  query?: string;
}

const { results, query = '' } = Astro.props;
const defaultLogo = '/images/placeholder-logo.png';
const defaultImage = '/images/placeholder-image.jpg';

// Helper function to format dates
function formatDate(date: Date | string) {
  try {
    return format(new Date(date), 'MMM d, yyyy');
  } catch {
    return 'Date unavailable';
  }
}

// Helper function to truncate text
function truncateText(text: string, maxLength: number = 150) {
  if (!text) return '';
  return text.length > maxLength 
    ? text.substring(0, maxLength) + '...' 
    : text;
}

// Calculate total results
const totalResults = Object.values(results).reduce(
  (sum, arr) => sum + arr.length, 
  0
);
---

{totalResults > 0 ? (
  <div class="space-y-8">
    {/* Services Results */}
    {results.services.length > 0 && (
      <section>
        <h2 class="text-xl font-semibold text-gray-900 mb-4">Services</h2>
        <div class="space-y-4">
          {results.services.map(service => (
            <a 
              href={`/services/${service.slug}`} 
              class="block group"
              title={service.data.title}
            >
              <article class="bg-white rounded-lg shadow-sm p-4 hover:shadow-md transition-shadow flex items-start">
                <div class="w-12 h-12 bg-gray-100 rounded-lg overflow-hidden flex-shrink-0 mr-4">
                  <img
                    src={service.data.logo || defaultLogo}
                    alt={`${service.data.title} logo`}
                    class="w-full h-full object-cover"
                    onError={`this.onerror=null; this.src='${defaultLogo}'`}
                  />
                </div>
                <div class="flex-grow">
                  <h3 class="text-lg font-semibold text-gray-900 group-hover:text-primary-600">
                    {service.data.title}
                  </h3>
                  <p class="text-sm text-gray-600 mb-2">
                    {truncateText(service.data.description)}
                  </p>
                  <div class="flex items-center text-sm text-gray-500">
                    {service.data.category && (
                      <span class="capitalize">{service.data.category}</span>
                    )}
                    {service.data.location?.city && (
                      <>
                        <span class="mx-2">•</span>
                        <span>{service.data.location.city}</span>
                      </>
                    )}
                  </div>
                </div>
              </article>
            </a>
          ))}
        </div>
      </section>
    )}

    {/* Events Results */}
    {results.events.length > 0 && (
      <section>
        <h2 class="text-xl font-semibold text-gray-900 mb-4">Events</h2>
        <div class="space-y-4">
          {results.events.map(event => (
            <a 
              href={`/events/${event.slug}`} 
              class="block group"
              title={event.data.title}
            >
              <article class="bg-white rounded-lg shadow-sm p-4 hover:shadow-md transition-shadow flex items-start">
                <div class="w-16 h-16 bg-gray-100 rounded-lg overflow-hidden flex-shrink-0 mr-4">
                  <img
                    src={event.data.image || defaultImage}
                    alt={event.data.title}
                    class="w-full h-full object-cover"
                    onError={`this.onerror=null; this.src='${defaultImage}'`}
                  />
                </div>
                <div class="flex-grow">
                  <div class="flex items-center gap-2 mb-1">
                    <time 
                      datetime={event.data.date instanceof Date 
                        ? event.data.date.toISOString() 
                        : new Date(event.data.date).toISOString()
                      } 
                      class="text-sm text-gray-500"
                    >
                      {formatDate(event.data.date)}
                    </time>
                    {event.data.status && (
                      <span 
                        class:list={[
                          "text-sm font-medium capitalize",
                          {
                            "text-green-600": event.data.status === 'upcoming',
                            "text-gray-500": event.data.status === 'past'
                          }
                        ]}
                      >
                        {event.data.status}
                      </span>
                    )}
                  </div>
                  <h3 class="text-lg font-semibold text-gray-900 group-hover:text-primary-600">
                    {event.data.title}
                  </h3>
                  <p class="text-sm text-gray-600 mb-2">
                    {truncateText(event.data.description)}
                  </p>
                  <div class="flex items-center text-sm text-gray-500">
                    {event.data.location?.venue && (
                      <span>{event.data.location.venue}</span>
                    )}
                    {event.data.time && (
                      <>
                        <span class="mx-2">•</span>
                        <span>{event.data.time}</span>
                      </>
                    )}
                  </div>
                </div>
              </article>
            </a>
          ))}
        </div>
      </section>
    )}

    {/* Resources Results */}
    {results.resources.length > 0 && (
      <section>
        <h2 class="text-xl font-semibold text-gray-900 mb-4">Resources</h2>
        <div class="space-y-4">
          {results.resources.map(resource => (
            <a 
              href={`/resources/${resource.slug}`} 
              class="block group"
              title={resource.data.title}
            >
              <article class="bg-white rounded-lg shadow-sm p-4 hover:shadow-md transition-shadow flex items-start">
                <div class="w-16 h-16 bg-gray-100 rounded-lg overflow-hidden flex-shrink-0 mr-4">
                  <img
                    src={resource.data.coverImage || resource.data.thumbnail || defaultImage}
                    alt={resource.data.title}
                    class="w-full h-full object-cover"
                    onError={`this.onerror=null; this.src='${defaultImage}'`}
                  />
                </div>
                <div class="flex-grow">
                  <h3 class="text-lg font-semibold text-gray-900 group-hover:text-primary-600">
                    {resource.data.title}
                  </h3>
                  <p class="text-sm text-gray-600 mb-2">
                    {truncateText(resource.data.description)}
                  </p>
                  <div class="flex items-center text-sm text-gray-500 mb-2">
                    {resource.data.category && (
                      <span class="capitalize">{resource.data.category}</span>
                    )}
                    {resource.data.lastUpdated && (
                      <>
                        <span class="mx-2">•</span>
                        <span>Updated {formatDate(resource.data.lastUpdated)}</span>
                      </>
                    )}
                  </div>
                  <div class="flex flex-wrap gap-2">
                    {resource.data.downloadUrl && (
                      <a
                        href={resource.data.downloadUrl}
                        class="inline-flex items-center px-2 py-1 text-xs font-medium text-white bg-primary-600 rounded hover:bg-primary-700"
                        download
                        target="_blank"
                        rel="noopener noreferrer"
                        onClick={(e) => e.stopPropagation()}
                      >
                        Download
                      </a>
                    )}
                    {resource.data.resourceUrl && (
                      <a
                        href={resource.data.resourceUrl}
                        class="inline-flex items-center px-2 py-1 text-xs font-medium text-gray-700 bg-gray-100 rounded hover:bg-gray-200"
                        target="_blank"
                        rel="noopener noreferrer"
                        onClick={(e) => e.stopPropagation()}
                      >
                        Visit Resource
                      </a>
                    )}
                  </div>
                </div>
              </article>
            </a>
          ))}
        </div>
      </section>
    )}
  </div>
) : (
  <div class="text-center py-8">
    <p class="text-gray-600">
      {query 
        ? `No results found for "${query}". Try adjusting your search terms.`
        : "Enter a search term to find services, events, and resources."
      }
    </p>
  </div>
)}
