---
interface Props {
  formId: string;
}

const { formId } = Astro.props;
---

<div id={`${formId}-status`} class="hidden">
  {/* Success Message */}
  <div 
    id={`${formId}-success`}
    class="hidden bg-green-50 border border-green-200 text-green-800 rounded-lg p-4 mb-6"
    role="alert"
  >
    <div class="flex">
      <svg class="h-5 w-5 text-green-400 mr-3" viewBox="0 0 20 20" fill="currentColor">
        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/>
      </svg>
      <div>
        <p class="font-medium">Application Submitted Successfully!</p>
        <p class="text-sm mt-1">Thank you for your submission. We will review your application and contact you soon.</p>
      </div>
    </div>
  </div>

  {/* Error Message */}
  <div 
    id={`${formId}-error`}
    class="hidden bg-red-50 border border-red-200 text-red-800 rounded-lg p-4 mb-6"
    role="alert"
  >
    <div class="flex">
      <svg class="h-5 w-5 text-red-400 mr-3" viewBox="0 0 20 20" fill="currentColor">
        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"/>
      </svg>
      <div>
        <p class="font-medium" id={`${formId}-error-title`}>Submission Error</p>
        <p class="text-sm mt-1" id={`${formId}-error-message`}>There was an error submitting your application. Please try again or contact support if the problem persists.</p>
        <div class="mt-3">
          <p class="text-sm font-medium">Common solutions:</p>
          <ul class="mt-1 text-sm list-disc list-inside pl-2">
            <li>Check your internet connection</li>
            <li>Ensure all required fields are filled</li>
            <li>Reduce file sizes if uploading documents (max 10MB)</li>
          </ul>
          <p class="mt-2 text-sm">
            Need help? Contact us at{' '}
            <a href="mailto:support@dzaleka.org" class="font-medium underline hover:text-red-700">
              support@dzaleka.org
            </a>
          </p>
        </div>
      </div>
    </div>
  </div>
</div>

<script define:vars={{ formId }}>
  window.addEventListener('load', function() {
    const form = document.getElementById(formId);
    const statusDiv = document.getElementById(`${formId}-status`);
    const successDiv = document.getElementById(`${formId}-success`);
    const errorDiv = document.getElementById(`${formId}-error`);
    const errorTitle = document.getElementById(`${formId}-error-title`);
    const errorMessage = document.getElementById(`${formId}-error-message`);

    if (form) {
      form.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        // Show loading state
        const submitButton = form.querySelector('button[type="submit"]');
        const originalButtonText = submitButton.innerHTML;
        submitButton.disabled = true;
        submitButton.innerHTML = `
          <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
          </svg>
          Submitting...
        `;
        
        // Hide any existing messages
        statusDiv.classList.remove('hidden');
        successDiv.classList.add('hidden');
        errorDiv.classList.add('hidden');

        try {
          // Validate file sizes before submission
          const fileInputs = form.querySelectorAll('input[type="file"]');
          let totalSize = 0;
          fileInputs.forEach(input => {
            if (input.files) {
              for (let i = 0; i < input.files.length; i++) {
                totalSize += input.files[i].size;
              }
            }
          });

          // Check if total file size exceeds 10MB
          if (totalSize > 10 * 1024 * 1024) {
            throw new Error('Total file size exceeds 10MB limit. Please reduce file sizes and try again.');
          }

          // Get form data
          const formData = new FormData(form);

          // Submit the form
          const response = await fetch(form.action, {
            method: 'POST',
            body: formData,
            headers: {
              'Accept': 'application/json'
            }
          });

          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }

          const data = await response.json();

          if (data.ok) {
            // Show success message
            successDiv.classList.remove('hidden');
            form.reset();
            
            // Redirect to thank you page with form type
            const formType = form.getAttribute('data-form-type') || 'default';
            window.location.href = `/thank-you?type=${formType}`;
          } else {
            throw new Error(data.error || 'Form submission failed. Please try again.');
          }
        } catch (error) {
          // Show error message
          errorDiv.classList.remove('hidden');
          errorTitle.textContent = 'Submission Error';
          errorMessage.textContent = error.message || 'A system error occurred. Please try again later or contact support.';
          console.error('Form submission error:', error);

          // Reset button state
          submitButton.disabled = false;
          submitButton.innerHTML = originalButtonText;
        }

        // Scroll error message into view
        statusDiv.scrollIntoView({ behavior: 'smooth', block: 'start' });
      });

      // Add form validation
      const requiredFields = form.querySelectorAll('[required]');
      requiredFields.forEach(field => {
        field.addEventListener('invalid', (e) => {
          e.preventDefault();
          statusDiv.classList.remove('hidden');
          errorDiv.classList.remove('hidden');
          errorTitle.textContent = 'Validation Error';
          errorMessage.textContent = 'Please fill in all required fields correctly.';
          statusDiv.scrollIntoView({ behavior: 'smooth', block: 'start' });
        });

        // Add real-time validation
        field.addEventListener('input', () => {
          if (field.validity.valid) {
            field.classList.remove('border-red-500');
            field.classList.add('border-gray-300');
          } else {
            field.classList.remove('border-gray-300');
            field.classList.add('border-red-500');
          }
        });
      });
    }
  });
</script>
