---
import { getCollection } from 'astro:content';
import Layout from '../../layouts/Layout.astro';
import SearchBar from '../../components/ui/SearchBar.astro';

// Enable server-side rendering for search
export const prerender = false;

// Get all content from collections
let services = [];
let events = [];
let resources = [];

try {
  services = await getCollection('services');
  events = await getCollection('events');
  resources = await getCollection('resources');
} catch (error) {
  console.error('Error fetching collections:', error);
}

// Get search query from URL and ensure it's trimmed
const query = (Astro.url.searchParams.get('q') || '').trim();

// Safely get nested object properties
function getNestedValue(obj: any, path: string) {
  try {
    return path.split('.').reduce((acc, part) => acc?.[part], obj);
  } catch {
    return undefined;
  }
}

// Function to search through content
function searchContent(items: any[], searchQuery: string) {
  if (!searchQuery) return [];
  
  const normalizedQuery = searchQuery.toLowerCase().trim();
  
  return items.filter(item => {
    try {
      // Safely get searchable fields
      const searchableFields = [
        getNestedValue(item, 'data.title'),
        getNestedValue(item, 'data.description'),
        getNestedValue(item, 'data.category'),
        item.slug?.replace(/-/g, ' '),
        getNestedValue(item, 'data.location.address'),
        getNestedValue(item, 'data.location.city'),
        getNestedValue(item, 'data.location.venue'),
        ...(getNestedValue(item, 'data.tags') || [])
      ];
      
      // Create searchable text from valid fields
      const searchableText = searchableFields
        .filter(field => typeof field === 'string' && field.length > 0)
        .join(' ')
        .toLowerCase();

      // Split query into words and remove empty strings
      const queryWords = normalizedQuery
        .split(/\s+/)
        .filter(word => word.length > 0);
      
      // Check if any query word matches
      return queryWords.some(word => {
        // Handle common variations
        const variations = [
          word,
          word.replace(/[aeiou]/g, ''), // Remove vowels
          word.replace(/[^a-z0-9]/g, ''), // Remove special characters
        ];
        
        return variations.some(variation => 
          searchableText.includes(variation)
        );
      });
    } catch (error) {
      console.error('Error searching item:', error);
      return false;
    }
  });
}

// Search results
const searchResults = {
  services: searchContent(services, query),
  events: searchContent(events, query),
  resources: searchContent(resources, query)
};

const totalResults = Object.values(searchResults).reduce(
  (sum, results) => sum + results.length,
  0
);

// Format date for display
function formatDate(date: string | Date) {
  try {
    return new Date(date).toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
  } catch {
    return 'Date not available';
  }
}

---

<Layout title={`Search Results ${query ? `for "${query}"` : ''}`}>
  <main class="container mx-auto px-4 py-8">
    <div class="max-w-3xl mx-auto">
      <!-- Search Bar -->
      <div class="mb-8">
        <SearchBar section="search" initialValue={query} fullWidth={true} placeholder="Search for services, events, and resources..." />
      </div>

      <!-- Results Header -->
      <div class="mb-8">
        <h1 class="text-3xl font-bold text-gray-900 mb-4">Search Results</h1>
        {query ? (
          <p class="text-gray-600">
            {totalResults === 0
              ? `No results found for "${query}"`
              : `Found ${totalResults} result${totalResults === 1 ? '' : 's'} for "${query}"`}
          </p>
        ) : (
          <p class="text-gray-600">Enter a search term to find services, events, and resources.</p>
        )}
      </div>

      {query && totalResults > 0 ? (
        <div class="space-y-8">
          {/* Services Results */}
          {searchResults.services.length > 0 && (
            <section>
              <h2 class="text-xl font-semibold text-gray-900 mb-4">Services</h2>
              <div class="space-y-4">
                {searchResults.services.map(service => (
                  <a href={`/services/${service.slug}`} class="block">
                    <article class="bg-white rounded-lg shadow-sm p-4 hover:shadow-md transition-shadow">
                      <div class="flex items-start gap-4">
                        <div class="w-16 h-16 bg-gray-100 rounded-lg overflow-hidden flex-shrink-0">
                          <img
                            src={service.data.logo || '/images/placeholder-logo.png'}
                            alt={`${service.data.title || 'Service'} logo`}
                            class="w-full h-full object-cover"
                          />
                        </div>
                        <div class="flex-grow">
                          <h3 class="text-lg font-semibold text-gray-900">{service.data.title || 'Untitled Service'}</h3>
                          <p class="text-sm text-gray-600 mb-2">{service.data.description || 'No description available'}</p>
                          {service.data.category && (
                            <span class="inline-block px-2 py-1 text-xs font-medium bg-gray-100 text-gray-800 rounded-full">
                              {service.data.category}
                            </span>
                          )}
                        </div>
                      </div>
                    </article>
                  </a>
                ))}
              </div>
            </section>
          )}

          {/* Events Results */}
          {searchResults.events.length > 0 && (
            <section>
              <h2 class="text-xl font-semibold text-gray-900 mb-4">Events</h2>
              <div class="space-y-4">
                {searchResults.events.map(event => (
                  <a href={`/events/${event.slug}`} class="block">
                    <article class="bg-white rounded-lg shadow-sm p-4 hover:shadow-md transition-shadow">
                      <div class="flex items-start gap-4">
                        <div class="w-16 h-16 bg-gray-100 rounded-lg overflow-hidden flex-shrink-0">
                          <img
                            src={event.data.image || '/images/placeholder-event.png'}
                            alt={`${event.data.title || 'Event'} image`}
                            class="w-full h-full object-cover"
                          />
                        </div>
                        <div class="flex-grow">
                          <h3 class="text-lg font-semibold text-gray-900">{event.data.title || 'Untitled Event'}</h3>
                          <p class="text-sm text-gray-600 mb-2">{event.data.description || 'No description available'}</p>
                          <div class="flex items-center gap-2">
                            <span class="text-xs text-gray-500">
                              {formatDate(event.data.date)}
                            </span>
                            {event.data.category && (
                              <span class="inline-block px-2 py-1 text-xs font-medium bg-gray-100 text-gray-800 rounded-full">
                                {event.data.category}
                              </span>
                            )}
                          </div>
                        </div>
                      </div>
                    </article>
                  </a>
                ))}
              </div>
            </section>
          )}

          {/* Resources Results */}
          {searchResults.resources.length > 0 && (
            <section>
              <h2 class="text-xl font-semibold text-gray-900 mb-4">Resources</h2>
              <div class="space-y-4">
                {searchResults.resources.map(resource => (
                  <div class="group relative">
                    <a href={`/resources/${resource.slug}`} class="absolute inset-0 z-10" aria-hidden="true"></a>
                    <article class="bg-white rounded-lg shadow-sm p-4 hover:shadow-md transition-shadow">
                      <div class="flex items-start gap-4">
                        <div class="w-16 h-16 bg-gray-100 rounded-lg overflow-hidden flex-shrink-0">
                          {resource.data.coverImage ? (
                            <img
                              src={resource.data.coverImage}
                              alt={`${resource.data.title || 'Resource'} cover`}
                              class="w-full h-full object-cover"
                            />
                          ) : (
                            <div class="w-full h-full flex items-center justify-center bg-gray-100">
                              <svg class="w-8 h-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                              </svg>
                            </div>
                          )}
                        </div>
                        <div class="flex-grow">
                          <h3 class="text-lg font-semibold text-gray-900 group-hover:text-primary-600 transition-colors">
                            {resource.data.title || 'Untitled Resource'}
                          </h3>
                          <p class="text-sm text-gray-600 mb-2">{resource.data.description || 'No description available'}</p>
                          <div class="flex flex-wrap items-center gap-2 mt-3">
                            {resource.data.category && (
                              <span class="inline-block px-2 py-1 text-xs font-medium bg-gray-100 text-gray-800 rounded-full">
                                {resource.data.category}
                              </span>
                            )}
                            {resource.data.downloadUrl && (
                              <a
                                href={resource.data.downloadUrl.startsWith('http') ? resource.data.downloadUrl : `/resources/pdf/${resource.data.downloadUrl}`}
                                class="relative z-20 inline-flex items-center px-3 py-1 text-sm font-medium text-white bg-primary-600 rounded-lg hover:bg-primary-700 focus:ring-2 focus:ring-primary-300"
                                download
                                target="_blank"
                                rel="noopener noreferrer"
                                onClick={(e) => e.stopPropagation()}
                              >
                                <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4" />
                                </svg>
                                Download
                              </a>
                            )}
                            {resource.data.resourceUrl && (
                              <a
                                href={resource.data.resourceUrl}
                                class="relative z-20 inline-flex items-center px-3 py-1 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 focus:ring-2 focus:ring-gray-200"
                                target="_blank"
                                rel="noopener noreferrer"
                                onClick={(e) => e.stopPropagation()}
                              >
                                <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" />
                                </svg>
                                Visit Resource
                              </a>
                            )}
                          </div>
                        </div>
                      </div>
                    </article>
                  </div>
                ))}
              </div>
            </section>
          )}
        </div>
      ) : query ? (
        <div class="text-center py-12 bg-white rounded-lg shadow-sm">
          <h2 class="text-xl font-semibold text-gray-900 mb-4">
            No matching results found
          </h2>
          <p class="text-gray-600">
            Try adjusting your search terms or browse our content using the navigation menu.
          </p>
        </div>
      ) : null}
    </div>
  </main>
</Layout>
