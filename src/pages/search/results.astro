---
import { getCollection } from 'astro:content';
import MainLayout from '../../layouts/MainLayout.astro';
import SearchBar from '../../components/ui/SearchBar.astro';

// Static mode for Netlify
export const prerender = true;

// Get all collections at build time
const services = await getCollection('services');
const events = await getCollection('events');
const resources = await getCollection('resources');

// Pass collections to client-side script
const collections = {
  services: services.map(item => ({
    slug: item.slug,
    data: item.data,
    collection: 'services'
  })),
  events: events.map(item => ({
    slug: item.slug,
    data: item.data,
    collection: 'events'
  })),
  resources: resources.map(item => ({
    slug: item.slug,
    data: item.data,
    collection: 'resources'
  }))
};
---

<MainLayout title="Search Results">
  <main class="container mx-auto px-4 py-8">
    <div class="max-w-3xl mx-auto">
      <!-- Search Bar -->
      <div class="mb-8">
        <SearchBar section="search" />
      </div>

      <!-- Search Results -->
      <div id="searchResults" class="space-y-8">
        <div class="text-center py-12">
          <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600 mx-auto"></div>
          <p class="mt-4 text-gray-600">Loading search results...</p>
        </div>
      </div>
    </div>
  </main>
</MainLayout>

<script define:vars={{ collections }}>
// Helper function to safely get nested object properties
function getNestedValue(obj, path) {
  try {
    return path.split('.').reduce((acc, part) => acc?.[part], obj);
  } catch {
    return undefined;
  }
}

// Search function
function searchContent(items, searchQuery) {
  if (!searchQuery) return [];
  
  const normalizedQuery = searchQuery.toLowerCase().trim();
  
  return items.filter(item => {
    try {
      // Safely get searchable fields
      const searchableFields = [
        getNestedValue(item, 'data.title'),
        getNestedValue(item, 'data.description'),
        getNestedValue(item, 'data.category'),
        item.slug?.replace(/-/g, ' '),
        getNestedValue(item, 'data.location.address'),
        getNestedValue(item, 'data.location.city'),
        getNestedValue(item, 'data.location.venue'),
        ...(getNestedValue(item, 'data.tags') || [])
      ];
      
      // Create searchable text from valid fields
      const searchableText = searchableFields
        .filter(field => typeof field === 'string' && field.length > 0)
        .join(' ')
        .toLowerCase();

      // Split query into words and remove empty strings
      const queryWords = normalizedQuery
        .split(/\s+/)
        .filter(word => word.length > 0);
      
      // Check if any query word matches
      return queryWords.some(word => {
        // Handle common variations
        const variations = [
          word,
          word.replace(/[aeiou]/g, ''), // Remove vowels
          word.replace(/[^a-z0-9]/g, ''), // Remove special characters
        ];
        
        return variations.some(variation => 
          searchableText.includes(variation)
        );
      });
    } catch (error) {
      console.error('Error searching item:', error);
      return false;
    }
  });
}

// Get search query from URL
const urlParams = new URLSearchParams(window.location.search);
const query = urlParams.get('q')?.trim() || '';

// Perform search
const searchResults = {
  services: searchContent(collections.services, query),
  events: searchContent(collections.events, query),
  resources: searchContent(collections.resources, query)
};

// Calculate total results
const totalResults = Object.values(searchResults)
  .reduce((acc, curr) => acc + curr.length, 0);

// Function to render a service card
function renderServiceCard(service) {
  return `
    <div class="bg-white rounded-lg shadow-sm p-6">
      <h3 class="text-lg font-semibold text-gray-900">
        <a href="/services/${service.slug}" class="hover:text-primary-600">
          ${service.data.title}
        </a>
      </h3>
      <p class="mt-2 text-gray-600">${service.data.description}</p>
      ${service.data.category ? `
        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-primary-100 text-primary-800 mt-2">
          ${service.data.category}
        </span>
      ` : ''}
    </div>
  `;
}

// Function to render an event card
function renderEventCard(event) {
  return `
    <div class="bg-white rounded-lg shadow-sm p-6">
      <h3 class="text-lg font-semibold text-gray-900">
        <a href="/events/${event.slug}" class="hover:text-primary-600">
          ${event.data.title}
        </a>
      </h3>
      <p class="mt-2 text-gray-600">${event.data.description}</p>
      ${event.data.category ? `
        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-primary-100 text-primary-800 mt-2">
          ${event.data.category}
        </span>
      ` : ''}
    </div>
  `;
}

// Function to render a resource card
function renderResourceCard(resource) {
  return `
    <div class="bg-white rounded-lg shadow-sm p-6">
      <h3 class="text-lg font-semibold text-gray-900">
        <a href="/resources/${resource.slug}" class="hover:text-primary-600">
          ${resource.data.title}
        </a>
      </h3>
      <p class="mt-2 text-gray-600">${resource.data.description}</p>
      ${resource.data.category ? `
        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-primary-100 text-primary-800 mt-2">
          ${resource.data.category}
        </span>
      ` : ''}
    </div>
  `;
}

// Render search results
const resultsContainer = document.getElementById('searchResults');
if (resultsContainer) {
  if (!query) {
    resultsContainer.innerHTML = `
      <div class="text-center py-12 bg-white rounded-lg shadow-sm">
        <h2 class="text-xl font-semibold text-gray-900 mb-4">
          Enter a search term to begin
        </h2>
        <p class="text-gray-600">
          Search for services, events, and resources
        </p>
      </div>
    `;
  } else if (totalResults === 0) {
    resultsContainer.innerHTML = `
      <div class="text-center py-12 bg-white rounded-lg shadow-sm">
        <h2 class="text-xl font-semibold text-gray-900 mb-4">
          No matching results found
        </h2>
        <p class="text-gray-600">
          Try adjusting your search terms or browse our categories
        </p>
      </div>
    `;
  } else {
    let html = '';
    
    if (searchResults.services.length > 0) {
      html += `
        <section>
          <h2 class="text-xl font-semibold text-gray-900 mb-4">Services</h2>
          <div class="space-y-4">
            ${searchResults.services.map(renderServiceCard).join('')}
          </div>
        </section>
      `;
    }
    
    if (searchResults.events.length > 0) {
      html += `
        <section>
          <h2 class="text-xl font-semibold text-gray-900 mb-4">Events</h2>
          <div class="space-y-4">
            ${searchResults.events.map(renderEventCard).join('')}
          </div>
        </section>
      `;
    }
    
    if (searchResults.resources.length > 0) {
      html += `
        <section>
          <h2 class="text-xl font-semibold text-gray-900 mb-4">Resources</h2>
          <div class="space-y-4">
            ${searchResults.resources.map(renderResourceCard).join('')}
          </div>
        </section>
      `;
    }
    
    resultsContainer.innerHTML = html;
  }
}

// Update page title
document.title = `Search Results ${query ? `for "${query}"` : ''}`;
</script>
