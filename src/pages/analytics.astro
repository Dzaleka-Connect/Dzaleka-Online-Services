---
import MainLayout from '../layouts/MainLayout.astro';
import DeviceAnalytics from '../components/DeviceAnalytics.astro';
import AnalyticsOverview from '../components/analytics/AnalyticsOverview.astro';
import { 
  calculateBounceRate, 
  calculateAvgSessionDuration, 
  calculatePagesPerSession, 
  formatDuration,
  formatPagePath,
  exportAnalyticsData,
  getAnalyticsData,
  downloadFile,
  convertToCSV,
  getSessionId,
  getVisitorId,
  getDeviceType,
  getBrowserName,
  storeAnalyticsData,
  calculateAverageLoadTime,
  calculateAverageServerResponse,
  calculateAverageResourceLoad,
  calculateAverageDnsLookup,
  calculateAverageTcpConnection,
  calculateAverageDomInteractive,
  calculateAverageDomComplete,
  trackPageView,
  cleanupOldData,
  MAX_BACKUP_SIZE,
  getTotalVisitors
} from '../utils/analytics-utils';

const title = "Analytics | Dzaleka Heritage Archive";
---

<MainLayout title={title}>
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    <div class="mb-8">
      <h1 class="text-3xl font-bold text-center mb-2">Dzaleka Online Services Analytics</h1>
      <p class="text-center text-gray-600">Privacy-friendly, client-side analytics for Dzaleka Heritage Archives</p>
    </div>

    <div id="analytics-container" class="space-y-8">
      <!-- Loading State -->
      <div class="animate-pulse" id="loading-state">
        <div class="h-8 bg-gray-200 rounded w-1/3 mb-4"></div>
        <div class="h-4 bg-gray-200 rounded w-full mb-3"></div>
        <div class="h-4 bg-gray-200 rounded w-5/6 mb-3"></div>
        <div class="h-4 bg-gray-200 rounded w-4/6"></div>
      </div>

      <!-- Analytics Content will be rendered by JavaScript -->
      <div id="analytics-content" class="hidden"></div>

        <!-- Data Management -->
      <div class="flex flex-col gap-4 items-center mt-8">
        <div class="flex gap-4">
          <button id="exportBtn" 
            class="px-6 py-2.5 bg-blue-600 text-white rounded-lg hover:bg-blue-700 
            transition duration-150 flex items-center gap-2 font-medium">
            <span>Export Data</span>
          </button>
          <button id="backupBtn"
            class="px-6 py-2.5 bg-green-600 text-white rounded-lg hover:bg-green-700 
            transition duration-150 flex items-center gap-2 font-medium">
            <span>Create Backup</span>
          </button>
          <button id="importBtn" 
            class="px-6 py-2.5 bg-purple-600 text-white rounded-lg hover:bg-purple-700 
            transition duration-150 flex items-center gap-2 font-medium">
            <span>Import Data</span>
          </button>
        </div>
        <p class="text-sm text-gray-500 mt-2">
          ⚠️ Analytics data is stored locally. Export or backup regularly to prevent data loss.
        </p>
        <div class="flex gap-2">
          <button id="exportCsvBtn" 
            class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 text-sm">
            Export CSV
          </button>
          <button id="exportPdfBtn"
            class="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700 text-sm">
            Export PDF
          </button>
          <button id="exportJsonBtn"
            class="px-4 py-2 bg-purple-600 text-white rounded hover:bg-purple-700 text-sm">
            Export JSON
          </button>
        </div>
        <input type="file" id="fileInput" accept=".json" class="hidden" />
      </div>
    </div>
  </div>

  <!-- Load Chart.js first -->
  <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.1/dist/chart.umd.min.js"></script>

    <script>
    let Chart;
    // Import all necessary functions
    import { 
      calculateBounceRate, 
      calculateAvgSessionDuration, 
      calculatePagesPerSession, 
      formatDuration,
      formatPagePath,
      exportAnalyticsData,
      getAnalyticsData,
      downloadFile,
      convertToCSV,
      getSessionId,
      getVisitorId,
      getDeviceType,
      getBrowserName,
      storeAnalyticsData,
      calculateAverageLoadTime,
      calculateAverageServerResponse,
      calculateAverageResourceLoad,
      calculateAverageDnsLookup,
      calculateAverageTcpConnection,
      calculateAverageDomInteractive,
      calculateAverageDomComplete,
      trackPageView,
      cleanupOldData,
      MAX_BACKUP_SIZE,
      getTotalVisitors
    } from '../utils/analytics-utils';
    
    // Track if we're using fallback/session data
    let usingSessionData = false;
    let analyticsData = null;
    let sessionStartTime = new Date();
    let analyticsModule = null;
    let currentErrorPage = 1;
    
    // Format date for display
    const formatDate = (dateString) => {
      if (!dateString) return '-';
      try {
        const date = new Date(dateString);
        return date.toLocaleDateString(undefined, { 
          year: 'numeric', 
          month: 'short', 
          day: 'numeric',
          hour: '2-digit',
          minute: '2-digit'
        });
      } catch (e) {
        return '-';
      }
    };
    
    // Format milliseconds for display
    const formatMs = (ms) => {
      if (!ms) return '0ms';
      if (ms < 1000) return `${Math.round(ms)}ms`;
      if (ms < 60000) return `${(ms / 1000).toFixed(2)}s`;
      const minutes = Math.floor(ms / 60000);
      const seconds = ((ms % 60000) / 1000).toFixed(1);
      return `${minutes}m ${seconds}s`;
    };
    
    // Check if we're using session-based data (as opposed to localStorage)
    function isUsingSessionData(data) {
      // Check if data is from the session object
      const hasSetProperties = data && 
                               Object.keys(data).length > 0 && 
                               typeof data.totalViews === 'number';
                               
      // Check if first visit is very recent (within last minute)
      const isVeryRecent = data && 
                           data.firstVisit && 
                           (new Date(data.firstVisit) > new Date(Date.now() - 60000));
                           
      return !hasSetProperties || isVeryRecent;
    }
    
    // Add helper functions for rendering metrics
    function renderDeviceDistribution(data) {
      const devices = data.devices || {};
      const total = Object.values(devices).reduce((sum, count) => sum + count, 0);
      
      return Object.entries(devices)
        .sort(([, a], [, b]) => b - a) // Sort by count descending
        .map(([device, count]) => {
          const percentage = total ? Math.round((count / total) * 100) : 0;
          return `
            <div class="flex items-center justify-between py-2">
              <div class="flex items-center">
                <span class="text-sm text-gray-600">${device}</span>
              </div>
              <div class="flex items-center">
                <div class="w-32 bg-gray-200 rounded-full h-2 mr-2">
                  <div class="bg-blue-600 h-2 rounded-full" style="width: ${percentage}%"></div>
                </div>
                <span class="text-sm text-gray-600">${percentage}%</span>
              </div>
            </div>
          `;
        }).join('');
    }

    function renderBrowserUsage(data) {
      const browsers = data.browsers || {};
      const total = Object.values(browsers).reduce((sum, count) => sum + count, 0);
      
      return Object.entries(browsers)
        .sort(([, a], [, b]) => b - a) // Sort by count descending
        .map(([browser, count]) => {
          const percentage = total ? Math.round((count / total) * 100) : 0;
          return `
            <div class="flex items-center justify-between py-2">
              <div class="flex items-center">
                <span class="text-sm text-gray-600">${browser}</span>
              </div>
              <div class="flex items-center">
                <div class="w-32 bg-gray-200 rounded-full h-2 mr-2">
                  <div class="bg-green-600 h-2 rounded-full" style="width: ${percentage}%"></div>
                </div>
                <span class="text-sm text-gray-600">${percentage}%</span>
              </div>
          </div>
        `;
        }).join('');
    }

    function renderRealtimeActivity(data) {
      const itemsPerPage = 6;
      const currentPage = window.realtimeActivityPage || 1;

      const recentSessions = Object.entries(data.sessions || {})
        .filter(([, session]) => {
          const lastActive = new Date(session.lastActive);
          return Date.now() - lastActive.getTime() < 300000; // Active in last 5 minutes
        })
        .sort(([, a], [, b]) => new Date(b.lastActive) - new Date(a.lastActive));

      const totalPages = Math.ceil(recentSessions.length / itemsPerPage);
      const paginatedSessions = recentSessions.slice(
        (currentPage - 1) * itemsPerPage,
        currentPage * itemsPerPage
      );

      if (recentSessions.length === 0) {
        return `<div class="text-center text-gray-500 py-4">No active sessions</div>`;
      }

      return `
        <div class="space-y-4">
          ${paginatedSessions.map(([, session]) => `
            <div class="flex items-center justify-between py-2">
              <div class="flex items-center space-x-3">
                <span class="h-2 w-2 bg-green-500 rounded-full animate-pulse"></span>
                <span class="text-sm text-gray-600">${session.device}</span>
                <span class="text-sm text-gray-400">${session.browser}</span>
              </div>
              <div class="text-sm text-gray-500">
                <div class="flex items-center gap-2">
                  <span>${formatPagePath(session.pages[session.pages.length - 1])}</span>
                  ${session.pages.length > 1 ? `
                    <button class="text-blue-600 hover:text-blue-800 text-xs view-history" data-session-id="${session.id}">
                      View History
                    </button>
                  ` : ''}
                </div>
              </div>
            </div>
          `).join('')}
        </div>
        ${totalPages > 1 ? `
          <div class="mt-4 flex items-center justify-between border-t pt-4">
            <div class="text-sm text-gray-500">
              Showing ${(currentPage - 1) * itemsPerPage + 1} to ${Math.min(currentPage * itemsPerPage, recentSessions.length)} 
              of ${recentSessions.length} active sessions
            </div>
            <div class="flex gap-1">
              <button 
                class="realtime-page-btn px-2 py-1 rounded-md bg-gray-100 text-gray-700 hover:bg-gray-200 
                  ${currentPage === 1 ? 'opacity-50 cursor-not-allowed' : ''}"
                data-page="${currentPage - 1}"
                ${currentPage === 1 ? 'disabled' : ''}
              >
                ←
              </button>
              ${Array.from({ length: totalPages }, (_, i) => i + 1)
                .map(page => `
                  <button 
                    class="realtime-page-btn px-3 py-1 rounded-md ${
                      page === currentPage 
                        ? 'bg-blue-600 text-white' 
                        : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                    }"
                    data-page="${page}"
                  >
                    ${page}
                  </button>
                `).join('')}
              <button 
                class="realtime-page-btn px-2 py-1 rounded-md bg-gray-100 text-gray-700 hover:bg-gray-200
                  ${currentPage === totalPages ? 'opacity-50 cursor-not-allowed' : ''}"
                data-page="${currentPage + 1}"
                ${currentPage === totalPages ? 'disabled' : ''}
              >
                →
              </button>
            </div>
          </div>
        ` : ''}
      `;
    }

    function renderLocationMetrics(data) {
      // Get locations from sessions
      const sessions = Object.values(data.sessions || {});
      const locations = sessions.reduce((acc, session) => {
        const device = session.device || 'Unknown Device';
        const browser = session.browser || 'Unknown Browser';
        const key = `${device} / ${browser}`;
        
        if (!acc[key]) {
          acc[key] = { total: 0, sessions: [] };
        }
        
        acc[key].total += 1;
        acc[key].sessions.push({
          lastActive: session.lastActive,
          pageViews: session.pageViews || 0
        });
        
        return acc;
      }, {});
      
      return Object.entries(locations)
        .sort(([, a], [, b]) => b.total - a.total)
        .map(([location, data]) => `
          <div class="flex flex-col gap-2 py-2">
            <div class="flex items-center justify-between font-medium">
              <span class="text-sm text-gray-800">${location}</span>
              <span class="text-sm text-gray-900">${data.total} visits</span>
            </div>
            <div class="pl-4 space-y-1">
              ${data.sessions
                .sort((a, b) => new Date(b.lastActive) - new Date(a.lastActive))
                .slice(0, 3)
                .map(session => `
                  <div class="flex items-center justify-between">
                    <span class="text-xs text-gray-600">Last active: ${formatDate(session.lastActive)}</span>
                    <span class="text-xs text-gray-500">${session.pageViews} page views</span>
                  </div>
                `).join('')}
            </div>
          </div>
        `).join('') || '<div class="text-sm text-gray-500 text-center">No location data available</div>';
    }

    // Format session ID for display
    function formatSessionId(sessionId) {
      if (!sessionId) return 'Unknown Session';
      const parts = sessionId.split('_');
      if (parts.length < 3) return 'Session';
      // Return just the unique part (last segment)
      return `Session ${parts[2].substring(0, 8)}`;
    }

    // Update the renderAnalytics function
    const renderAnalytics = (data) => {
      const errorsPerPage = 6;
      
      const container = document.getElementById('analytics-content');
      if (!data) {
        container.innerHTML = `
          <div class="text-center p-8 bg-gray-50 rounded-xl">
            <h2 class="text-xl font-semibold text-gray-800 mb-2">No Analytics Data Available</h2>
            <p class="text-gray-600">Start browsing the site to generate analytics data.</p>
          </div>
        `;
        return;
      }

      // Ensure all required data structures exist
      data.pageViews = data.pageViews || {};
      data.sessions = data.sessions || {};
      data.visitors = data.visitors || {};
      data.devices = data.devices || {};
      data.browsers = data.browsers || {};
      data.journeys = data.journeys || {};
      data.errors = data.errors || { jsErrors: [] };
      data.timeOnPage = data.timeOnPage || {};
      data.locations = data.locations || {};

      // Calculate real-time metrics
      const bounceRate = calculateBounceRate(data);
      const avgSessionDuration = calculateAvgSessionDuration(data);
      const pagesPerSession = calculatePagesPerSession(data);
      const today = new Date().toISOString().split('T')[0];
      const todayVisitors = getTotalVisitors(data, today);
      const totalVisitors = Object.values(data.visitors || {}).reduce((acc, arr) => {
        return acc + new Set(arr.map(v => `${v.id}_${v.deviceId}`)).size;
      }, 0);
      
      // Calculate active sessions more accurately
      const activeSessions = Object.entries(data.sessions)
        .filter(([, session]) => {
          const lastActive = new Date(session.lastActive);
          const fiveMinutesAgo = new Date(Date.now() - 300000);
          return lastActive > fiveMinutesAgo;
        }).length;

      container.innerHTML = `
        <!-- Overview Section -->
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-8">
          <div class="bg-white p-6 rounded-xl shadow-sm">
            <h3 class="text-sm font-medium text-gray-500">Total Page Views</h3>
            <p class="text-2xl font-bold text-gray-900 mt-2">${data.totalViews || 0}</p>
            <p class="text-sm text-gray-500 mt-1">All time</p>
              </div>
          <div class="bg-white p-6 rounded-xl shadow-sm">
            <h3 class="text-sm font-medium text-gray-500">Today's Visitors</h3>
            <p class="text-2xl font-bold text-gray-900 mt-2">${todayVisitors}</p>
            <p class="text-sm text-gray-500 mt-1">Unique visitors today</p>
              </div>
          <div class="bg-white p-6 rounded-xl shadow-sm">
            <h3 class="text-sm font-medium text-gray-500">Total Visitors</h3>
            <p class="text-2xl font-bold text-gray-900 mt-2">${totalVisitors}</p>
            <p class="text-sm text-gray-500 mt-1">Since ${formatDate(data.firstVisit)}</p>
              </div>
          <div class="bg-white p-6 rounded-xl shadow-sm">
            <h3 class="text-sm font-medium text-gray-500">Active Sessions</h3>
            <p class="text-2xl font-bold text-gray-900 mt-2">${activeSessions}</p>
            <p class="text-sm text-gray-500 mt-1">Last 5 minutes</p>
            </div>
          </div>
          
        <!-- Real-time Activity -->
        <div class="bg-white rounded-xl shadow-sm p-6 mb-8">
          <div class="flex items-center justify-between mb-4">
            <h3 class="text-lg font-medium text-gray-900">Real-time Activity</h3>
            <span class="flex items-center text-green-600">
              <span class="h-2 w-2 bg-green-600 rounded-full mr-2 animate-pulse"></span>
              Live
            </span>
            </div>
          <div class="space-y-4">
            ${renderRealtimeActivity(data)}
          </div>
        </div>
        
        <!-- Engagement Metrics -->
        <div class="bg-white rounded-xl shadow-sm p-6 mb-8">
          <h3 class="text-lg font-medium text-gray-900 mb-4">Engagement Metrics</h3>
          <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
            ${renderEngagementMetrics(data)}
            </div>
            </div>

        <!-- Popular Pages -->
        <div class="bg-white rounded-xl shadow-sm p-6 mb-8 popular-pages">
          <h3 class="text-lg font-medium text-gray-900 mb-4">Popular Pages</h3>
          <div class="overflow-x-auto">
            ${renderPopularPagesTable(data)}
          </div>
        </div>
        
        <!-- User Journey Section -->
        <div class="bg-white rounded-xl shadow-sm p-6 mb-8">
          <div class="flex items-center justify-between mb-6">
            <h3 class="text-lg font-medium text-gray-900">User Journeys</h3>
            <div class="flex items-center gap-4">
              <div class="text-sm text-gray-500">
                ${Object.keys(data.journeys || {}).length} total sessions
            </div>
              <button id="toggleJourneys" class="text-sm text-blue-600 hover:text-blue-800">
                Show All
              </button>
            </div>
            </div>
          <div class="space-y-4" id="journeysContainer">
            ${renderUserJourneys(data)}
            </div>
        </div>

        <!-- Location and Device Stats -->
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
          <!-- Location Stats -->
          <div class="bg-white rounded-xl shadow-sm p-6">
            <h3 class="text-lg font-medium text-gray-900 mb-4">Visitor Locations</h3>
            <div class="space-y-2">
              ${renderLocationMetrics(data)}
          </div>
        </div>
        
          <!-- Device Stats -->
          <div class="bg-white rounded-xl shadow-sm p-6">
            <h3 class="text-lg font-medium text-gray-900 mb-4">Device Distribution</h3>
            ${renderDeviceDistribution(data)}
          </div>
        </div>
        
        <!-- Storage Usage -->
        <div class="bg-white rounded-xl shadow-sm p-6 mb-8">
          <div class="flex items-center justify-between mb-4">
            <h3 class="text-lg font-medium text-gray-900">Storage Usage</h3>
            <button id="cleanupBtn" 
              class="px-3 py-1 text-sm bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors">
              Clean Up Old Data
            </button>
          </div>
          <div class="space-y-4">
            <div class="flex items-center justify-between">
              <span class="text-sm text-gray-600">Analytics Data Size</span>
              <span class="text-sm font-medium text-gray-900">
                ${(JSON.stringify(data).length / 1024).toFixed(1)} KB
              </span>
            </div>
            <div class="flex items-center justify-between">
              <span class="text-sm text-gray-600">Backup Size</span>
              <span class="text-sm font-medium text-gray-900">
                ${(localStorage.getItem('dzaleka_analytics_backup')?.length / 1024 || 0).toFixed(1)} KB
              </span>
            </div>
            <div class="flex items-center justify-between">
              <span class="text-sm text-gray-600">Storage Quota</span>
              <span class="text-sm font-medium text-gray-900">5 MB</span>
            </div>
            <div class="h-2 bg-gray-200 rounded-full">
              <div 
                class="h-2 bg-blue-600 rounded-full" 
                style="width: ${(JSON.stringify(data).length / MAX_BACKUP_SIZE * 100).toFixed(1)}%">
              </div>
            </div>
          </div>
        </div>

        <!-- Charts Section -->
        ${safeRenderCharts(data)}

        <!-- Performance Metrics -->
        ${renderPerformanceMetrics(data)}
      `;

      // Update data in real-time
      const updateRealTimeData = () => {
        const realtimeSection = document.querySelector('[data-section="realtime"]');
        if (realtimeSection) {
          realtimeSection.innerHTML = renderRealtimeActivity(data);
        }
      };
      
      // Update active sessions count
      const updateActiveSessions = () => {
        const activeSessionsElement = document.querySelector('[data-metric="active-sessions"]');
        if (activeSessionsElement) {
          const currentActiveSessions = Object.entries(data.sessions)
            .filter(([, session]) => {
              const lastActive = new Date(session.lastActive);
              const fiveMinutesAgo = new Date(Date.now() - 300000);
              return lastActive > fiveMinutesAgo;
            }).length;
          activeSessionsElement.textContent = currentActiveSessions;
        }
      };

      // Set up real-time updates
      setInterval(() => {
        updateRealTimeData();
        updateActiveSessions();
      }, 5000);

      // Show content and initialize charts
      document.getElementById('loading-state').style.display = 'none';
      container.classList.remove('hidden');
      initializeCharts(data);

      // Add pagination event listeners
      setupErrorPagination(data.errors?.jsErrors || [], errorsPerPage);
      setupPopularPagesPagination();
      setupRealtimeActivityPagination();

      // Add cleanup button handler
      document.getElementById('cleanupBtn')?.addEventListener('click', async () => {
        try {
          const cleanedData = cleanupOldData(data);
          await storeAnalyticsData(cleanedData);
          renderAnalytics(cleanedData);
        } catch (error) {
          console.error('Error cleaning up data:', error);
        }
      });

      // Add journey toggle handler
      document.getElementById('toggleJourneys')?.addEventListener('click', (e) => {
        const hiddenJourneys = document.getElementById('hiddenJourneys');
        const button = e.target;
        if (hiddenJourneys.classList.contains('hidden')) {
          hiddenJourneys.classList.remove('hidden');
          button.textContent = 'Show Less';
        } else {
          hiddenJourneys.classList.add('hidden');
          button.textContent = 'Show All';
          // Scroll to top of journeys section
          document.querySelector('#journeysContainer').scrollIntoView({ behavior: 'smooth' });
        }
      });
    };

    function renderEngagementMetrics(data) {
      const bounceRate = calculateBounceRate(data);
      const avgSessionDuration = calculateAvgSessionDuration(data);
      const pagesPerSession = calculatePagesPerSession(data);
      
      return `
        <div class="p-4 bg-blue-50 rounded-lg">
          <h4 class="text-sm font-medium text-gray-500">Bounce Rate</h4>
          <p class="text-2xl font-bold text-blue-700">${bounceRate}%</p>
          <p class="text-sm text-gray-500 mt-1">Single page visits</p>
        </div>
        <div class="p-4 bg-green-50 rounded-lg">
          <h4 class="text-sm font-medium text-gray-500">Avg. Session Duration</h4>
          <p class="text-2xl font-bold text-green-700">${formatDuration(avgSessionDuration)}</p>
          <p class="text-sm text-gray-500 mt-1">Time per session</p>
        </div>
        <div class="p-4 bg-purple-50 rounded-lg">
          <h4 class="text-sm font-medium text-gray-500">Pages per Session</h4>
          <p class="text-2xl font-bold text-purple-700">${pagesPerSession}</p>
          <p class="text-sm text-gray-500 mt-1">Average pages viewed</p>
        </div>
      `;
    }

    function renderPopularPagesTable(data) {
      const itemsPerPage = 8;
      const currentPage = window.popularPagesPage || 1;
      
      // Sort and paginate pages
      const sortedPages = Object.entries(data.pageViews || {})
        .sort(([, a], [, b]) => b - a);
      
      const totalPages = Math.ceil(sortedPages.length / itemsPerPage);
      const paginatedPages = sortedPages.slice(
        (currentPage - 1) * itemsPerPage,
        currentPage * itemsPerPage
      );

      return `
        <table class="min-w-full divide-y divide-gray-200">
              <thead class="bg-gray-50">
                <tr>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Page</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Views</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">% of Total</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Avg. Time</th>
                </tr>
              </thead>
          <tbody class="bg-white divide-y divide-gray-200">
            ${paginatedPages
              .map(([page, views]) => {
                const percentage = ((views / (data.totalViews || 1)) * 100).toFixed(1);
                const avgTime = data.timeOnPage?.[page] 
                  ? formatDuration(Math.round(data.timeOnPage[page].total / data.timeOnPage[page].count / 1000))
                  : '-';
                return `
                  <tr>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${formatPagePath(page)}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${views}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${percentage}%</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${avgTime}</td>
                  </tr>
                `;
              }).join('')}
              </tbody>
            </table>
        ${totalPages > 1 ? `
          <div class="mt-4 flex items-center justify-between">
            <div class="text-sm text-gray-500">
              Showing ${(currentPage - 1) * itemsPerPage + 1} to ${Math.min(currentPage * itemsPerPage, sortedPages.length)} 
              of ${sortedPages.length} pages
          </div>
            <div class="flex gap-1">
              <button 
                class="pages-btn px-2 py-1 rounded-md bg-gray-100 text-gray-700 hover:bg-gray-200 
                  ${currentPage === 1 ? 'opacity-50 cursor-not-allowed' : ''}"
                data-page="${currentPage - 1}"
                ${currentPage === 1 ? 'disabled' : ''}
              >
                ←
              </button>
              ${Array.from({ length: totalPages }, (_, i) => i + 1)
                .map(page => `
                  <button 
                    class="pages-btn px-3 py-1 rounded-md ${
                      page === currentPage 
                        ? 'bg-blue-600 text-white' 
                        : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                    }"
                    data-page="${page}"
                  >
                    ${page}
                  </button>
                `).join('')}
              <button 
                class="pages-btn px-2 py-1 rounded-md bg-gray-100 text-gray-700 hover:bg-gray-200
                  ${currentPage === totalPages ? 'opacity-50 cursor-not-allowed' : ''}"
                data-page="${currentPage + 1}"
                ${currentPage === totalPages ? 'disabled' : ''}
              >
                →
              </button>
        </div>
        </div>
        ` : ''}
      `;
    }

    // Add pagination handler for Popular Pages
    function setupPopularPagesPagination() {
      document.querySelectorAll('.pages-btn').forEach(btn => {
        btn.addEventListener('click', (e) => {
          const page = parseInt(e.target.dataset.page);
          if (page && page > 0) {
            window.popularPagesPage = page;
            renderAnalytics(analyticsData);
            // Scroll to top of table
            document.querySelector('.popular-pages').scrollIntoView({ behavior: 'smooth' });
          }
        });
      });
    }

    function renderUserJourneys(data) {
      const journeys = data.journeys || {};
      const recentJourneys = Object.entries(journeys)
        .sort(([, a], [, b]) => new Date(b.startTime) - new Date(a.startTime))
        .slice(0, 5); // Show only last 5 journeys

      if (recentJourneys.length === 0) {
        return '<div class="text-center text-gray-500 py-4">No journey data available</div>';
      }

      return recentJourneys.map(([sessionId, journey]) => `
        <div class="border rounded-lg p-4 hover:bg-gray-50 transition-colors">
          <div class="flex items-center justify-between mb-3">
            <div>
              <h4 class="text-sm font-medium text-gray-900">${formatSessionId(sessionId)}</h4>
              <p class="text-xs text-gray-500">Started ${formatDate(journey.startTime)}</p>
                </div>
            <div class="text-right">
              <p class="text-sm font-medium text-gray-900">${journey.path?.length || 0} pages</p>
              <p class="text-xs text-gray-500">
                ${formatDuration(Math.round((new Date(journey.path?.[journey.path?.length - 1]?.timestamp || journey.startTime) - new Date(journey.startTime)) / 1000))}
              </p>
              </div>
            </div>
          <div class="flex flex-nowrap overflow-x-auto gap-2 pb-2 scrollbar-thin scrollbar-thumb-gray-300 scrollbar-track-gray-100">
            ${journey.path?.map((p, i) => `
              <div class="flex items-center group text-xs whitespace-nowrap">
                <span class="px-3 py-1 bg-gray-100 rounded text-sm group-hover:bg-blue-50 group-hover:text-blue-700 transition-colors">
                  ${formatPagePath(p.page)}
                  <span class="text-[10px] text-gray-500 ml-1">
                    ${new Date(p.timestamp).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                  </span>
                </span>
                ${i < journey.path.length - 1 ? `
                  <svg class="w-3 h-3 mx-1 text-gray-400 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                  </svg>
                ` : ''}
          </div>
            `).join('')}
          </div>
          <div class="mt-2 pt-2 border-t flex items-center gap-3 text-xs text-gray-500">
            <span class="flex items-center">
              <svg class="w-3 h-3 mr-1" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
              </svg>
              ${journey.device || 'Unknown Device'}
            </span>
            <span class="flex items-center">
              <svg class="w-3 h-3 mr-1" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3.055 11H5a2 2 0 012 2v1a2 2 0 002 2 2 2 0 012 2v2.945M8 3.935V5.5A2.5 2.5 0 0010.5 8h.5a2 2 0 012 2 2 2 0 104 0 2 2 0 012-2h1.064M15 20.488V18a2 2 0 012-2h3.064" />
              </svg>
              ${journey.browser || 'Unknown Browser'}
            </span>
          </div>
        </div>
      `).join('');
    }

    function renderCharts(data) {
      if (!Chart) {
        console.warn('Chart.js not loaded yet');
        return;
      }
      
      // Calculate visitor trend data
      const visitorTrendData = {
        labels: [],
        visitors: [],
        pageViews: [],
        activeSessions: []
      };
      
      // Get the last 7 days of data
      const today = new Date();
      for (let i = 6; i >= 0; i--) {
        const date = new Date(today);
        date.setDate(date.getDate() - i);
        const dateString = date.toISOString().split('T')[0];
        visitorTrendData.labels.push(date.toLocaleDateString(undefined, { weekday: 'short' }));
        
        // Get visitors for this date
        visitorTrendData.visitors.push(getTotalVisitors(data, dateString));
        
        // Calculate page views for this date
        const dailyPageViews = Object.entries(data.sessions || {})
          .filter(([, session]) => {
            const sessionDate = new Date(session.startTime).toISOString().split('T')[0];
            return sessionDate === dateString;
          })
          .reduce((total, [, session]) => total + (session.pageViews || 0), 0);
        visitorTrendData.pageViews.push(dailyPageViews);
        
        // Calculate active sessions for this date
        const activeSessions = Object.entries(data.sessions || {})
          .filter(([, session]) => {
            const sessionDate = new Date(session.startTime).toISOString().split('T')[0];
            return sessionDate === dateString;
          }).length;
        visitorTrendData.activeSessions.push(activeSessions);
      }

        return `
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
          <!-- Visitor Trend Chart -->
          <div class="bg-white rounded-xl shadow-sm p-6 md:col-span-2">
            <h3 class="text-lg font-medium text-gray-900 mb-4">Activity Trends</h3>
            <div class="h-64 relative">
              <canvas id="visitor-trend-chart"></canvas>
            </div>
            <div class="mt-4 text-center text-sm text-gray-500">
              Last 7 days of site activity
            </div>
          </div>
        
          <!-- Device Distribution -->
          <div class="bg-white rounded-xl shadow-sm p-6">
            <h3 class="text-lg font-medium text-gray-900 mb-4">Device Distribution</h3>
            <div class="mb-4">
              ${renderDeviceDistribution(data)}
            </div>
            <div class="text-center text-sm text-gray-500 mb-2">
              ${Object.values(data.devices || {}).reduce((a, b) => a + b, 0)} total visits
            </div>
            <div class="h-64 relative">
              <canvas id="device-chart"></canvas>
            </div>
          </div>
          
          <!-- Browser Usage -->
          <div class="bg-white rounded-xl shadow-sm p-6">
            <h3 class="text-lg font-medium text-gray-900 mb-4">Browser Usage</h3>
            <div class="mb-4">
              ${renderBrowserUsage(data)}
            </div>
            <div class="text-center text-sm text-gray-500 mb-2">
              ${Object.values(data.browsers || {}).reduce((a, b) => a + b, 0)} total visits
            </div>
            <div class="h-64 relative">
              <canvas id="browser-chart"></canvas>
            </div>
          </div>
        </div>
      `;
    }

    function renderPerformanceMetrics(data) {
        return `
        <div class="bg-white rounded-xl shadow-sm p-6">
          <h3 class="text-lg font-medium text-gray-900 mb-4">Performance Metrics</h3>
          <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div class="p-4 bg-yellow-50 rounded-lg">
              <h4 class="text-sm font-medium text-gray-500">Avg. Load Time</h4>
              <p class="text-2xl font-bold text-yellow-700" id="avg-load-time">
                ${formatMs(calculateAverageLoadTime(data))}
              </p>
              <p class="text-sm text-gray-500 mt-1">Total page load</p>
            </div>
            <div class="p-4 bg-red-50 rounded-lg">
              <h4 class="text-sm font-medium text-gray-500">Server Response</h4>
              <p class="text-2xl font-bold text-red-700" id="server-response">
                ${formatMs(calculateAverageServerResponse(data))}
              </p>
              <p class="text-sm text-gray-500 mt-1">Time to first byte</p>
            </div>
            <div class="p-4 bg-indigo-50 rounded-lg">
              <h4 class="text-sm font-medium text-gray-500">Resource Load</h4>
              <p class="text-2xl font-bold text-indigo-700" id="resource-load">
                ${formatMs(calculateAverageResourceLoad(data))}
              </p>
              <p class="text-sm text-gray-500 mt-1">Asset loading time</p>
            </div>
          </div>
          
          <!-- Detailed Performance Metrics -->
          <div class="mt-6 grid grid-cols-1 md:grid-cols-2 gap-4">
            <div class="p-4 bg-gray-50 rounded-lg">
              <h4 class="text-sm font-medium text-gray-500">DNS Lookup</h4>
              <p class="text-xl font-bold text-gray-700">
                ${formatMs(calculateAverageDnsLookup(data))}
              </p>
            </div>
            <div class="p-4 bg-gray-50 rounded-lg">
              <h4 class="text-sm font-medium text-gray-500">TCP Connection</h4>
              <p class="text-xl font-bold text-gray-700">
                ${formatMs(calculateAverageTcpConnection(data))}
              </p>
            </div>
            <div class="p-4 bg-gray-50 rounded-lg">
              <h4 class="text-sm font-medium text-gray-500">DOM Interactive</h4>
              <p class="text-xl font-bold text-gray-700">
                ${formatMs(calculateAverageDomInteractive(data))}
              </p>
            </div>
            <div class="p-4 bg-gray-50 rounded-lg">
              <h4 class="text-sm font-medium text-gray-500">DOM Complete</h4>
              <p class="text-xl font-bold text-gray-700">
                ${formatMs(calculateAverageDomComplete(data))}
              </p>
            </div>
          </div>
        </div>
      `;
    }

    function initializeCharts(data) {
      if (!Chart) {
        console.warn('Chart.js not loaded yet');
        return;
      }
      
      // Calculate visitor trend data
      const visitorTrendData = {
        labels: [],
        visitors: [],
        pageViews: [],
        activeSessions: []
      };
      
      // Get the last 7 days of data
      const today = new Date();
      for (let i = 6; i >= 0; i--) {
        const date = new Date(today);
        date.setDate(date.getDate() - i);
        const dateString = date.toISOString().split('T')[0];
        visitorTrendData.labels.push(date.toLocaleDateString(undefined, { weekday: 'short' }));
        
        // Get visitors for this date
        visitorTrendData.visitors.push(getTotalVisitors(data, dateString));
        
        // Calculate page views for this date
        const dailyPageViews = Object.entries(data.sessions || {})
          .filter(([, session]) => {
            const sessionDate = new Date(session.startTime).toISOString().split('T')[0];
            return sessionDate === dateString;
          })
          .reduce((total, [, session]) => total + (session.pageViews || 0), 0);
        visitorTrendData.pageViews.push(dailyPageViews);
        
        // Calculate active sessions for this date
        const activeSessions = Object.entries(data.sessions || {})
          .filter(([, session]) => {
            const sessionDate = new Date(session.startTime).toISOString().split('T')[0];
            return sessionDate === dateString;
          }).length;
        visitorTrendData.activeSessions.push(activeSessions);
      }
      
      try {
        // Destroy existing charts if they exist
        const deviceChart = Chart.getChart('device-chart');
        if (deviceChart) {
          deviceChart.destroy();
        }
        
        const browserChart = Chart.getChart('browser-chart');
        if (browserChart) {
          browserChart.destroy();
        }
        
        const visitorTrendChart = Chart.getChart('visitor-trend-chart');
        if (visitorTrendChart) {
          visitorTrendChart.destroy();
        }
        
        // Visitor Trend Chart
        const visitorTrendCtx = document.getElementById('visitor-trend-chart')?.getContext('2d');
        if (visitorTrendCtx) {
          new Chart(visitorTrendCtx, {
            id: 'visitor-trend-chart',
          type: 'line',
          data: {
              labels: visitorTrendData.labels,
            datasets: [{
                label: 'Visitors',
                data: visitorTrendData.visitors,
                borderColor: '#3B82F6',
                backgroundColor: 'rgba(59, 130, 246, 0.1)',
              fill: true,
                tension: 0.4
              }, {
                label: 'Page Views',
                data: visitorTrendData.pageViews,
                borderColor: '#10B981',
                backgroundColor: 'rgba(16, 185, 129, 0.1)',
                fill: true,
                tension: 0.4
              }, {
                label: 'Active Sessions',
                data: visitorTrendData.activeSessions,
                borderColor: '#6366F1',
                backgroundColor: 'rgba(99, 102, 241, 0.1)',
                fill: true,
                tension: 0.4
            }]
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
              legend: {
                display: true,
                  position: 'top',
                  labels: {
                    usePointStyle: true,
                    padding: 20
                  }
              },
              tooltip: {
                  callbacks: {
                    label: (context) => {
                      const label = context.dataset.label;
                      const value = context.parsed.y;
                      return `${label}: ${value}`;
                    }
                  }
                }
              },
            scales: {
              y: {
                beginAtZero: true,
                ticks: {
                    stepSize: 1
                  }
                },
                x: {
                  grid: {
                    display: false
                }
              }
            }
          }
        });
        }

        // Device Distribution Chart
        const deviceCtx = document.getElementById('device-chart')?.getContext('2d');
        if (deviceCtx) {
          new Chart(deviceCtx, {
            id: 'device-chart',
            type: 'doughnut',
            data: {
              labels: Object.keys(data.devices || {}),
              datasets: [{
                data: Object.values(data.devices || {}),
                backgroundColor: ['#3B82F6', '#10B981', '#6366F1', '#8B5CF6'],
                borderWidth: 0
              }]
            },
            options: {
              responsive: true,
              maintainAspectRatio: false,
              plugins: {
                legend: {
                  display: false
                },
                tooltip: {
                  callbacks: {
                    label: (context) => {
                      const value = context.raw;
                      const total = context.dataset.data.reduce((a, b) => a + b, 0);
                      const percentage = ((value / total) * 100).toFixed(1);
                      return `${context.label}: ${value} (${percentage}%)`;
                    }
                  }
                }
              },
              cutout: '65%'
            }
          });
        }

        // Browser Usage Chart
        const browserCtx = document.getElementById('browser-chart')?.getContext('2d');
        if (browserCtx) {
          new Chart(browserCtx, {
            id: 'browser-chart',
            type: 'doughnut',
            data: {
              labels: Object.keys(data.browsers || {}),
              datasets: [{
                data: Object.values(data.browsers || {}),
                backgroundColor: ['#F59E0B', '#EF4444', '#8B5CF6', '#EC4899', '#06B6D4'],
                borderWidth: 0
              }]
            },
            options: {
              responsive: true,
              maintainAspectRatio: false,
              plugins: {
                legend: {
                  display: false
                },
                tooltip: {
                  callbacks: {
                    label: (context) => {
                      const value = context.raw;
                      const total = context.dataset.data.reduce((a, b) => a + b, 0);
                      const percentage = ((value / total) * 100).toFixed(1);
                      return `${context.label}: ${value} (${percentage}%)`;
                    }
                  }
                }
              },
              cutout: '65%'
            }
          });
        }
      } catch (error) {
        console.error('Error initializing charts:', error);
      }
    }

    // Add chart error boundary
    function safeRenderCharts(data) {
      try {
        return renderCharts(data);
        } catch (error) {
        console.error('Error rendering charts:', error);
        return `
          <div class="bg-red-50 p-4 rounded-lg">
            <p class="text-red-600">Error loading charts. Please refresh the page.</p>
          </div>
        `;
      }
    }

    // Add more client-side tracking
    function initializeClientTracking() {
      // Track page navigation with History API
      const originalPushState = history.pushState;
      history.pushState = function() {
        originalPushState.apply(this, arguments);
        trackPageView().catch(console.error);
      };
      
      window.addEventListener('popstate', () => trackPageView().catch(console.error));
      
      // Track clicks on links and buttons
      document.addEventListener('click', (e) => {
        const target = e.target.closest('a, button, [role="button"]');
        if (target) {
          const data = {
            type: target.tagName.toLowerCase(),
            text: target.textContent?.trim(),
            href: target.href,
            id: target.id,
            class: target.className,
            timestamp: new Date().toISOString()
          };
          trackInteraction('click', data);
        }
      });
      
      // Track form submissions
      document.addEventListener('submit', (e) => {
        const form = e.target;
        const data = {
          id: form.id,
          action: form.action,
          method: form.method,
          timestamp: new Date().toISOString()
        };
        trackInteraction('form_submit', data);
      });
      
      // Track file downloads
      document.addEventListener('click', (e) => {
        const link = e.target.closest('a[download]');
        if (link) {
          const data = {
            filename: link.download,
            href: link.href,
            timestamp: new Date().toISOString()
          };
          trackInteraction('download', data);
        }
      });
      
      // Track video interactions
      document.querySelectorAll('video').forEach(video => {
        video.addEventListener('play', () => {
          trackInteraction('video_play', {
            src: video.src,
            timestamp: new Date().toISOString()
          });
        });
        
        video.addEventListener('pause', () => {
          trackInteraction('video_pause', {
            src: video.src,
            currentTime: video.currentTime,
            timestamp: new Date().toISOString()
          });
        });
      });
      
      // Track scroll depth
      let maxScroll = 0;
      window.addEventListener('scroll', () => {
        const percent = Math.round(
          (window.scrollY + window.innerHeight) / document.documentElement.scrollHeight * 100
        );
        if (percent > maxScroll) {
          maxScroll = percent;
          trackInteraction('scroll_depth', {
            depth: percent,
            timestamp: new Date().toISOString()
          });
        }
      });
    }

    // Update the trackInteraction function
    function trackInteraction(type, interactionData) {
      if (!analyticsData) return;
      
      const timestamp = new Date().toISOString();
      const sessionId = getSessionId();
      
      // Update session last active time
      if (analyticsData.sessions[sessionId]) {
        analyticsData.sessions[sessionId].lastActive = timestamp;
      }
      
      // Record the interaction
      analyticsData.interactions = analyticsData.interactions || [];
      analyticsData.interactions.push({
        type,
        data: interactionData,
        timestamp,
        sessionId
      });
      
      // Store updated data
      storeAnalyticsData(analyticsData);
    }

    // Add pagination handler for Real-time Activity
    function setupRealtimeActivityPagination() {
      document.querySelectorAll('.realtime-page-btn').forEach(btn => {
        btn.addEventListener('click', (e) => {
          const page = parseInt(e.target.dataset.page);
          if (page && page > 0) {
            window.realtimeActivityPage = page;
            renderAnalytics(analyticsData);
          }
        });
      });
      
      // Add history view handlers
      document.querySelectorAll('.view-history').forEach(btn => {
        btn.addEventListener('click', (e) => {
          const sessionId = e.target.dataset.sessionId;
          const session = analyticsData.sessions[sessionId];
          if (session) {
            const history = session.pages.map(page => formatPagePath(page)).join(' → ');
            alert(`Page History:\n${history}`);
          }
        });
      });
    }

    // Initialize the analytics
    async function initialize() {
      try {
        console.log("Initializing analytics...");
        
        // Ensure Chart.js is loaded
        Chart = window.Chart;
        if (!Chart) {
          await new Promise(resolve => {
            const checkChart = setInterval(() => {
              if (window.Chart) {
                Chart = window.Chart;
                clearInterval(checkChart);
                resolve();
              }
            }, 100);
          });
        }
        
        analyticsData = await getAnalyticsData();
        // Clean up data on initialization if needed
        if (JSON.stringify(analyticsData).length > MAX_BACKUP_SIZE * 0.9) {
          console.log("Cleaning up data due to size...");
          analyticsData = cleanupOldData(analyticsData);
          await storeAnalyticsData(analyticsData);
        }
        
        resetErrorPagination();
        usingSessionData = isUsingSessionData(analyticsData);
        renderAnalytics(analyticsData);
        
        // Initialize charts after rendering
        initializeCharts(analyticsData);
        
        // Initialize client-side tracking
        initializeClientTracking();
        
        // Setup more frequent updates for real-time data
        setInterval(async () => {
          try {
            const newData = await getAnalyticsData();
            // Only update if there are changes
            if (JSON.stringify(newData) !== JSON.stringify(analyticsData)) {
              analyticsData = newData;
              renderAnalytics(analyticsData);
              initializeCharts(analyticsData);
            }
          } catch (e) {
            console.warn('Real-time update failed:', e);
          }
        }, 5000);
        
        // Setup auto-refresh for full data
        setInterval(async () => {
          try {
            analyticsData = await getAnalyticsData();
            resetErrorPagination();
            renderAnalytics(analyticsData);
            initializeCharts(analyticsData);
          } catch (e) {
            console.warn('Auto-refresh failed:', e);
          }
        }, 30000);
      } catch (error) {
        console.error('Error initializing analytics:', error);
        renderAnalytics(null);
      }
    }

    // Export functions
    async function exportAsCSV() {
      const data = await getAnalyticsData();
      const csvContent = convertToCSV(data);
      downloadFile(csvContent, 'text/csv', `analytics-${new Date().toISOString().split('T')[0]}.csv`);
    }

    async function exportAsPDF() {
      // Implement PDF export if needed
      alert('PDF export not yet implemented');
    }

    async function exportAsJSON() {
      const data = await getAnalyticsData();
      const jsonContent = JSON.stringify(data, null, 2);
      downloadFile(jsonContent, 'application/json', `analytics-${new Date().toISOString().split('T')[0]}.json`);
    }

    // File import handler
    async function handleFileImport(event) {
        const file = event.target.files[0];
        if (!file) return;
        
      try {
        const text = await file.text();
        const data = JSON.parse(text);
        await analyticsModule.importAnalyticsData(data);
        analyticsData = await getAnalyticsData();
        renderAnalytics(analyticsData);
      } catch (error) {
        console.error('Error importing file:', error);
        alert('Error importing analytics data. Please check the file format.');
      }
    }

    // Add pagination rendering function
    function renderErrorPagination(errors, perPage, currentPage) {
      const totalPages = Math.ceil(errors.length / perPage);
      if (totalPages <= 1) return '';
      
      // Function to create page numbers with ellipsis
      function getPageNumbers(current, total) {
        const pages = [];
        if (total <= 5) {
          // Show all pages if 5 or fewer
          for (let i = 1; i <= total; i++) {
            pages.push(i);
          }
        } else {
          // Always show first page
          pages.push(1);
          
          if (current <= 3) {
            // Near start
            pages.push(2, 3, 4, '...', total);
          } else if (current >= total - 2) {
            // Near end
            pages.push('...', total - 3, total - 2, total - 1, total);
            } else {
            // Middle
            pages.push('...', current - 1, current, current + 1, '...', total);
          }
        }
        return pages;
      }
      
      let pages = [];
      getPageNumbers(currentPage, totalPages).forEach(i => {
        if (i === '...') {
          pages.push(`<span class="px-2 text-gray-400">...</span>`);
        } else {
          pages.push(`
            <button 
              class="error-page-btn px-3 py-1 rounded-md ${
                i === currentPage 
                  ? 'bg-blue-600 text-white' 
                  : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
              }"
              data-page="${i}"
            >
              ${i}
            </button>
          `);
        }
      });
      
      return `
        <div class="mt-4 flex items-center justify-between">
          <div class="text-sm text-gray-500">
            Showing ${(currentPage - 1) * perPage + 1} to ${Math.min(currentPage * perPage, errors.length)} 
            of ${errors.length} errors
          </div>
          <div class="flex gap-1 items-center">
            <button 
              class="error-page-btn px-2 py-1 rounded-md bg-gray-100 text-gray-700 hover:bg-gray-200 
                ${currentPage === 1 ? 'opacity-50 cursor-not-allowed' : ''}"
              data-page="${currentPage - 1}"
              ${currentPage === 1 ? 'disabled' : ''}
            >
              ←
            </button>
            ${pages.join('')}
            <button 
              class="error-page-btn px-2 py-1 rounded-md bg-gray-100 text-gray-700 hover:bg-gray-200
                ${currentPage === totalPages ? 'opacity-50 cursor-not-allowed' : ''}"
              data-page="${currentPage + 1}"
              ${currentPage === totalPages ? 'disabled' : ''}
            >
              →
            </button>
          </div>
        </div>
      `;
    }

    // Add pagination event handler setup
    function setupErrorPagination(errors, perPage) {
      const totalPages = Math.ceil(errors.length / perPage);
      if (totalPages <= 1) return;
      
      document.querySelectorAll('.error-page-btn').forEach(btn => {
        btn.addEventListener('click', (e) => {
          e.preventDefault();
          const newPage = parseInt(e.target.dataset.page);
          if (newPage >= 1 && newPage <= totalPages) {
            currentErrorPage = newPage;
            renderAnalytics(analyticsData);
            document.querySelector('.error-page-btn').closest('.bg-white').scrollIntoView({ behavior: 'smooth' });
          }
        });
      });
    }

    // Add function to reset pagination when data changes
    function resetErrorPagination() {
      currentErrorPage = 1;
    }

    // Initialize the analytics
    document.addEventListener('DOMContentLoaded', () => {
      initialize();
      
      // Setup export/import handlers
      document.getElementById('exportBtn').addEventListener('click', () => exportAnalyticsData());
      document.getElementById('importBtn').addEventListener('click', () => document.getElementById('fileInput').click());
      document.getElementById('fileInput').addEventListener('change', handleFileImport);
      
      // Setup format-specific exports
      document.getElementById('exportCsvBtn').addEventListener('click', () => exportAsCSV());
      document.getElementById('exportPdfBtn').addEventListener('click', () => exportAsPDF());
      document.getElementById('exportJsonBtn').addEventListener('click', () => exportAsJSON());
    });
  </script>

  <style>
    .loading, .no-data, .error {
      text-align: center;
      padding: 30px;
      background-color: #f9f9f9;
      border-radius: 8px;
      margin: 30px 0;
    }
    
    .analytics-card {
      background-color: #f9f9f9;
      border-radius: 8px;
      padding: 20px;
      margin-bottom: 20px;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    
    .analytics-section {
      margin-bottom: 15px;
    }
    
    .analytics-section h4 {
      margin-bottom: 5px;
      color: #333;
    }
    
    .analytics-section ul {
      margin: 0;
      padding-left: 20px;
    }
    
    .footer-note {
      background-color: #f0f0f0;
      padding: 15px;
      border-radius: 8px;
      margin-top: 20px;
      font-size: 0.9em;
    }
    
    .note {
      background-color: #fff3cd;
      border-left: 4px solid #ffc107;
      padding: 10px;
      margin-top: 10px;
    }
  </style>
</MainLayout>