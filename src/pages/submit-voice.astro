---
import MainLayout from '../layouts/MainLayout.astro';

// Get environment variables
const CLOUDINARY_CLOUD_NAME = import.meta.env.PUBLIC_CLOUDINARY_CLOUD_NAME;
const CLOUDINARY_UPLOAD_PRESET = import.meta.env.PUBLIC_CLOUDINARY_UPLOAD_PRESET;
---

<MainLayout title="Submit Your Voice - Community Voice">
  <main class="min-h-screen bg-gradient-to-b from-gray-50 to-white pb-16">
    <!-- Hero Section -->
    <div class="relative bg-gradient-to-br from-primary-600 to-primary-800 overflow-hidden">
      <div class="absolute inset-0 bg-grid-white/[0.2] bg-[length:16px_16px] animate-pulse-slow"></div>
      <div class="relative max-w-4xl mx-auto px-4 py-24 text-center">
        <h1 class="text-4xl md:text-5xl lg:text-6xl font-bold text-white mb-6 animate-fade-in-up">
          Share Your Story
        </h1>
        <p class="text-xl md:text-2xl text-white/90 mb-8 max-w-2xl mx-auto animate-fade-in-up [animation-delay:200ms]">
          Your voice matters. Share your experiences, stories, and perspectives with the Dzaleka community.
        </p>
      </div>
    </div>

    <!-- Form Section -->
    <div class="max-w-3xl mx-auto px-4 py-12">
      <form 
        id="voiceForm"
        class="bg-white rounded-2xl shadow-sm p-8 md:p-12 space-y-8"
        onsubmit="handleSubmit(event)"
      >
        <!-- Title -->
        <div class="space-y-2">
          <label for="title" class="block text-sm font-medium text-gray-700">
            Title <span class="text-red-500">*</span>
          </label>
          <input
            type="text"
            id="title"
            name="title"
            required
            class="block w-full rounded-lg border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500 transition-colors"
            placeholder="Give your story a compelling title"
          />
        </div>

        <!-- Author -->
        <div class="space-y-2">
          <label for="author" class="block text-sm font-medium text-gray-700">
            Author <span class="text-red-500">*</span>
          </label>
          <input
            type="text"
            id="author"
            name="author"
            required
            class="block w-full rounded-lg border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500 transition-colors"
            placeholder="Your name or pen name"
          />
        </div>

        <!-- Category -->
        <div class="space-y-2">
          <label for="category" class="block text-sm font-medium text-gray-700">
            Category <span class="text-red-500">*</span>
          </label>
          <select
            id="category"
            name="category"
            required
            class="block w-full rounded-lg border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500 transition-colors"
          >
            <option value="">Select a category</option>
            <option value="Personal Story">Personal Story</option>
            <option value="Community Impact">Community Impact</option>
            <option value="Culture & Tradition">Culture & Tradition</option>
            <option value="Education">Education</option>
            <option value="Health & Wellness">Health & Wellness</option>
            <option value="Arts & Creativity">Arts & Creativity</option>
            <option value="Business & Entrepreneurship">Business & Entrepreneurship</option>
          </select>
        </div>

        <!-- Excerpt -->
        <div class="space-y-2">
          <label for="excerpt" class="block text-sm font-medium text-gray-700">
            Brief Summary <span class="text-red-500">*</span>
          </label>
          <textarea
            id="excerpt"
            name="excerpt"
            required
            rows="3"
            class="block w-full rounded-lg border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500 transition-colors"
            placeholder="Write a short summary of your story (2-3 sentences)"
          ></textarea>
        </div>

        <!-- Content -->
        <div class="space-y-2">
          <label for="content" class="block text-sm font-medium text-gray-700">
            Your Story <span class="text-red-500">*</span>
          </label>
          <div class="rounded-lg border border-gray-300 shadow-sm overflow-hidden focus-within:border-primary-500 focus-within:ring-1 focus-within:ring-primary-500">
            <div class="px-4 py-2 bg-gray-50 border-b border-gray-300">
              <div class="flex flex-wrap gap-2">
                <button
                  type="button"
                  onclick="formatText('bold')"
                  class="p-1 hover:bg-gray-200 rounded"
                  title="Bold"
                >
                  <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 12h8a4 4 0 100-8H6v8zm0 0h8a4 4 0 110 8H6v-8z" />
                  </svg>
                </button>
                <button
                  type="button"
                  onclick="formatText('italic')"
                  class="p-1 hover:bg-gray-200 rounded"
                  title="Italic"
                >
                  <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 20l4-16m4 4h-8M8 16h8" />
                  </svg>
                </button>
                <button
                  type="button"
                  onclick="formatText('heading')"
                  class="p-1 hover:bg-gray-200 rounded"
                  title="Heading"
                >
                  <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h7" />
                  </svg>
                </button>
                <button
                  type="button"
                  onclick="formatText('quote')"
                  class="p-1 hover:bg-gray-200 rounded"
                  title="Quote"
                >
                  <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 8h10M7 12h4m1 8l-4-4H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-3l-4 4z" />
                  </svg>
                </button>
              </div>
            </div>
            <textarea
              id="content"
              name="content"
              required
              rows="12"
              class="block w-full border-0 focus:ring-0 resize-y"
              placeholder="Share your story here. You can use markdown formatting for better presentation."
            ></textarea>
          </div>
          <p class="text-sm text-gray-500">
            Supports markdown formatting. Use ** for bold, * for italic, > for quotes, and # for headings.
          </p>
        </div>

        <!-- Tags -->
        <div class="space-y-2">
          <label for="tags" class="block text-sm font-medium text-gray-700">
            Tags
          </label>
          <input
            type="text"
            id="tags"
            name="tags"
            class="block w-full rounded-lg border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500 transition-colors"
            placeholder="Enter tags separated by commas (e.g., education, youth, community)"
          />
          <p class="text-sm text-gray-500">Optional: Add tags to help others find your story</p>
        </div>

        <!-- Image Upload -->
        <div class="space-y-2">
          <label for="image" class="block text-sm font-medium text-gray-700">
            Cover Image
          </label>
          <div class="flex justify-center px-6 pt-5 pb-6 border-2 border-gray-300 border-dashed rounded-lg hover:border-primary-500 transition-colors">
            <div class="space-y-1 text-center">
              <svg class="mx-auto h-12 w-12 text-gray-400" stroke="currentColor" fill="none" viewBox="0 0 48 48">
                <path d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
              </svg>
              <div class="flex text-sm text-gray-600">
                <label for="image" class="relative cursor-pointer rounded-md font-medium text-primary-600 hover:text-primary-500 focus-within:outline-none focus-within:ring-2 focus-within:ring-offset-2 focus-within:ring-primary-500">
                  <span>Upload a file</span>
                  <input id="image" name="image" type="file" class="sr-only" accept="image/*" />
                </label>
                <p class="pl-1">or drag and drop</p>
              </div>
              <p class="text-xs text-gray-500">PNG, JPG, GIF up to 10MB</p>
            </div>
          </div>
        </div>

        <!-- Submit Button -->
        <div class="flex items-center justify-end gap-4">
          <a 
            href="/community-voice"
            class="inline-flex items-center px-4 py-2 text-sm font-medium text-gray-700 hover:text-gray-900"
          >
            Cancel
          </a>
          <button
            type="submit"
            class="inline-flex items-center px-6 py-3 border border-transparent text-base font-medium rounded-lg shadow-sm text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 transition-colors"
          >
            Submit Story
          </button>
        </div>
      </form>
    </div>
  </main>
</MainLayout>

<style>
  .bg-grid-white {
    background-image: linear-gradient(to right, rgba(255, 255, 255, 0.1) 1px, transparent 1px),
      linear-gradient(to bottom, rgba(255, 255, 255, 0.1) 1px, transparent 1px);
  }

  .animate-pulse-slow {
    animation: pulse 4s cubic-bezier(0.4, 0, 0.6, 1) infinite;
  }

  .animate-fade-in-up {
    opacity: 0;
    transform: translateY(20px);
    animation: fadeInUp 1s ease-out forwards;
  }

  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes pulse {
    0%, 100% {
      opacity: 0.1;
    }
    50% {
      opacity: 0.2;
    }
  }
</style>

<script define:vars={{ CLOUDINARY_CLOUD_NAME, CLOUDINARY_UPLOAD_PRESET }}>
function formatText(type) {
  const textarea = document.getElementById('content');
  const start = textarea.selectionStart;
  const end = textarea.selectionEnd;
  const text = textarea.value;
  let format = '';
  
  switch(type) {
    case 'bold':
      format = '**';
      break;
    case 'italic':
      format = '*';
      break;
    case 'heading':
      format = '# ';
      break;
    case 'quote':
      format = '> ';
      break;
  }

  if (type === 'heading' || type === 'quote') {
    const beforeText = text.substring(0, start);
    const afterText = text.substring(end);
    const selectedText = text.substring(start, end);
    const newText = beforeText + format + selectedText + afterText;
    textarea.value = newText;
    textarea.setSelectionRange(start + format.length, end + format.length);
  } else {
    const newText = text.substring(0, start) + format + text.substring(start, end) + format + text.substring(end);
    textarea.value = newText;
    textarea.setSelectionRange(start + format.length, end + format.length);
  }
  
  textarea.focus();
}

async function uploadImage(file) {
  const formData = new FormData();
  formData.append('file', file);
  formData.append('upload_preset', CLOUDINARY_UPLOAD_PRESET);

  try {
    const response = await fetch(
      `https://api.cloudinary.com/v1_1/${CLOUDINARY_CLOUD_NAME}/image/upload`,
      {
        method: 'POST',
        body: formData,
      }
    );

    if (!response.ok) {
      throw new Error('Upload failed');
    }

    const data = await response.json();
    return data.secure_url;
  } catch (error) {
    console.error('Upload error:', error);
    throw error;
  }
}

async function handleSubmit(event) {
  event.preventDefault();
  
  const form = event.target;
  const submitButton = form.querySelector('button[type="submit"]');
  const fileInput = form.querySelector('input[type="file"]');
  
  try {
    submitButton.disabled = true;
    submitButton.innerHTML = `
      <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
      </svg>
      Submitting...
    `;

    let imageUrl = '';
    if (fileInput.files.length > 0) {
      imageUrl = await uploadImage(fileInput.files[0]);
    }

    const formData = {
      title: form.title.value,
      author: form.author.value,
      category: form.category.value,
      excerpt: form.excerpt.value,
      content: form.content.value,
      tags: form.tags.value.split(',').map(tag => tag.trim()).filter(Boolean),
      image: imageUrl,
      date: new Date().toISOString(),
    };

    console.log('Form data:', formData);
    alert('Form submission functionality will be implemented soon!');

  } catch (error) {
    console.error('Submission error:', error);
    alert('An error occurred while submitting the form. Please try again.');
  } finally {
    submitButton.disabled = false;
    submitButton.innerHTML = 'Submit Story';
  }
}

const dropZone = document.querySelector('input[type="file"]').parentElement.parentElement.parentElement;
const fileInput = document.querySelector('input[type="file"]');

['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
  dropZone.addEventListener(eventName, preventDefaults, false);
});

function preventDefaults(e) {
  e.preventDefault();
  e.stopPropagation();
}

['dragenter', 'dragover'].forEach(eventName => {
  dropZone.addEventListener(eventName, highlight, false);
});

['dragleave', 'drop'].forEach(eventName => {
  dropZone.addEventListener(eventName, unhighlight, false);
});

function highlight(e) {
  dropZone.classList.add('border-primary-500');
}

function unhighlight(e) {
  dropZone.classList.remove('border-primary-500');
}

dropZone.addEventListener('drop', handleDrop, false);

function handleDrop(e) {
  const dt = e.dataTransfer;
  const files = dt.files;
  fileInput.files = files;
}

fileInput.addEventListener('change', async function(e) {
  const file = e.target.files[0];
  if (!file) return;

  const reader = new FileReader();
  reader.onload = function(e) {
    const preview = document.createElement('div');
    preview.className = 'mt-4';
    preview.innerHTML = `
      <div class="relative">
        <img src="${e.target.result}" alt="Preview" class="rounded-lg max-h-48 mx-auto" />
        <button 
          type="button"
          onclick="removeImage()"
          class="absolute top-2 right-2 p-1 bg-red-500 text-white rounded-full hover:bg-red-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500"
        >
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>
    `;

    const existingPreview = dropZone.nextElementSibling;
    if (existingPreview && existingPreview.classList.contains('mt-4')) {
      existingPreview.remove();
    }
    dropZone.parentNode.insertBefore(preview, dropZone.nextSibling);
  };
  reader.readAsDataURL(file);
});

window.removeImage = function() {
  fileInput.value = '';
  const preview = dropZone.nextElementSibling;
  if (preview && preview.classList.contains('mt-4')) {
    preview.remove();
  }
};
</script>
