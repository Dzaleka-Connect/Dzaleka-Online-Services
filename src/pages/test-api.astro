---
import Layout from '../layouts/Layout.astro';

// Define all available collections
const collections = [
  'profiles',
  'services', 
  'resources', 
  'events', 
  'photos', 
  'pages', 
  'news', 
  'talents', 
  'community-voices', 
  'docs', 
  'jobs'
];

// Define API endpoints
const apiEndpoints = {
  export: '/api/export',
  ...collections.reduce((acc, collection) => {
    acc[collection] = `/api/${collection}`;
    return acc;
  }, {})
};
---

<Layout title="API Test">
  <main class="container mx-auto p-4">
    <h1 class="text-2xl font-bold mb-4">API Test Dashboard</h1>
    
    <div class="mb-6 bg-blue-50 p-4 rounded-lg border border-blue-200">
      <h2 class="text-lg font-semibold text-blue-800 mb-2">API Testing Tools</h2>
      <p class="text-sm text-blue-700 mb-2">
        Use this dashboard to test the API endpoints for different collections. You can test both the export API and individual collection endpoints.
      </p>
    </div>
    
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
      <!-- Export API Section -->
      <div class="bg-white p-4 rounded-lg shadow">
        <h2 class="text-xl font-bold mb-4 text-gray-800 border-b pb-2">Export API</h2>
        
        <div class="mb-4">
          <label for="exportApiUrl" class="block text-sm font-medium text-gray-700 mb-1">API URL:</label>
          <div class="flex">
            <input type="text" id="exportApiUrl" value={apiEndpoints.export} class="w-full p-2 border border-gray-300 rounded-md text-sm bg-gray-50" readonly />
            <button id="copyExportUrl" class="ml-2 bg-gray-200 hover:bg-gray-300 text-gray-700 font-bold py-2 px-4 rounded text-sm">
              Copy
            </button>
          </div>
        </div>
        
        <div class="mb-4">
          <button id="testGet" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mr-2 text-sm">
            Test GET
          </button>
        </div>
        
        <div class="mb-4">
          <label for="exportCollection" class="block text-sm font-medium text-gray-700 mb-1">Collection:</label>
          <select id="exportCollection" class="w-full p-2 border border-gray-300 rounded-md text-sm">
            {collections.map(collection => (
              <option value={collection}>{collection}</option>
            ))}
          </select>
        </div>
        
        <div class="mb-4">
          <label class="flex items-center space-x-2 text-sm">
            <input type="checkbox" id="includeMetadata" class="rounded text-blue-600" checked>
            <span>Include Metadata</span>
          </label>
          <label class="flex items-center space-x-2 text-sm mt-2">
            <input type="checkbox" id="includeStats" class="rounded text-blue-600" checked>
            <span>Include Stats</span>
          </label>
        </div>
        
        <button id="testExportPost" class="bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded text-sm">
          Test POST Export
        </button>
      </div>
      
      <!-- Direct Collection API Section -->
      <div class="bg-white p-4 rounded-lg shadow">
        <h2 class="text-xl font-bold mb-4 text-gray-800 border-b pb-2">Collection API</h2>
        
        <div class="mb-4">
          <label for="directCollection" class="block text-sm font-medium text-gray-700 mb-1">Collection:</label>
          <select id="directCollection" class="w-full p-2 border border-gray-300 rounded-md text-sm">
            {collections.map(collection => (
              <option value={collection}>{collection}</option>
            ))}
          </select>
        </div>
        
        <div class="mb-4">
          <label for="directApiUrl" class="block text-sm font-medium text-gray-700 mb-1">API URL:</label>
          <div class="flex">
            <input type="text" id="directApiUrl" class="w-full p-2 border border-gray-300 rounded-md text-sm bg-gray-50" readonly />
            <button id="copyDirectUrl" class="ml-2 bg-gray-200 hover:bg-gray-300 text-gray-700 font-bold py-2 px-4 rounded text-sm">
              Copy
            </button>
          </div>
        </div>
        
        <div class="mb-4">
          <label class="flex items-center space-x-2 text-sm">
            <input type="checkbox" id="directIncludeMetadata" class="rounded text-blue-600" checked>
            <span>Include Metadata</span>
          </label>
          <label class="flex items-center space-x-2 text-sm mt-2">
            <input type="checkbox" id="directIncludeStats" class="rounded text-blue-600" checked>
            <span>Include Stats</span>
          </label>
        </div>
        
        <div class="flex space-x-2">
          <button id="testDirectGet" class="bg-purple-500 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded text-sm">
            Test GET
          </button>
          <button id="testDirectPost" class="bg-indigo-500 hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded text-sm">
            Test POST
          </button>
        </div>
      </div>
    </div>
    
    <!-- Results Section -->
    <div class="mt-6">
      <div class="mb-4">
        <h2 class="text-xl font-bold mb-2">Request:</h2>
        <pre id="request" class="bg-gray-100 p-4 rounded overflow-auto max-h-40 text-sm">Select an option above to test the API...</pre>
      </div>
      
      <div>
        <h2 class="text-xl font-bold mb-2">Response:</h2>
        <pre id="response" class="bg-gray-100 p-4 rounded overflow-auto max-h-96 text-sm">Response will appear here...</pre>
      </div>
    </div>
    
    <!-- Collection Status Section -->
    <div class="mt-8 bg-white p-4 rounded-lg shadow">
      <h2 class="text-xl font-bold mb-4 text-gray-800 border-b pb-2">Collection Status</h2>
      
      <div class="flex justify-between items-center mb-4">
        <button id="checkAllCollections" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded text-sm">
          Check All Collections
        </button>
        <div class="text-sm text-gray-500">
          <span class="inline-block w-3 h-3 rounded-full bg-green-500 mr-1"></span> Available
          <span class="inline-block w-3 h-3 rounded-full bg-yellow-500 mx-1 ml-3"></span> Empty
          <span class="inline-block w-3 h-3 rounded-full bg-red-500 mx-1 ml-3"></span> Unavailable
          <span class="inline-block w-3 h-3 rounded-full bg-gray-300 mx-1 ml-3"></span> Not Checked
        </div>
      </div>
      
      <div id="collectionStatus" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        {collections.map(collection => (
          <div class="collection-card border rounded-lg p-3" data-collection={collection} data-endpoint={apiEndpoints[collection]}>
            <h3 class="font-medium text-gray-800">{collection}</h3>
            <div class="text-xs text-gray-500 mb-2 endpoint-url">{apiEndpoints[collection]}</div>
            <div class="flex items-center mt-2">
              <div class="status-indicator w-3 h-3 rounded-full bg-gray-300 mr-2"></div>
              <span class="status-text text-sm text-gray-500">Not checked</span>
            </div>
            <div class="text-xs text-gray-400 mt-1 item-count"></div>
            <div class="mt-2 flex justify-end">
              <button class="test-collection-btn text-xs text-blue-600 hover:text-blue-800 hover:underline">Test</button>
            </div>
          </div>
        ))}
      </div>
    </div>
  </main>
</Layout>

<script>
  // Get variables from Astro
  const apiEndpoints = JSON.parse(document.currentScript.getAttribute('data-api-endpoints'));
  const collections = JSON.parse(document.currentScript.getAttribute('data-collections'));
  
  // Update direct API URL when collection changes
  document.getElementById('directCollection')?.addEventListener('change', (e) => {
    const collection = e.target.value;
    const directApiUrlInput = document.getElementById('directApiUrl');
    if (directApiUrlInput) {
      directApiUrlInput.value = `/api/${collection}`;
    }
  });
  
  // Initialize direct API URL
  const initialCollection = document.getElementById('directCollection')?.value || 'services';
  const directApiUrlInput = document.getElementById('directApiUrl');
  if (directApiUrlInput) {
    directApiUrlInput.value = `/api/${initialCollection}`;
  }
  
  // Copy URL buttons
  document.getElementById('copyExportUrl')?.addEventListener('click', () => {
    const exportApiUrlInput = document.getElementById('exportApiUrl');
    if (exportApiUrlInput) {
      navigator.clipboard.writeText(exportApiUrlInput.value);
      
      const button = document.getElementById('copyExportUrl');
      if (button) {
        const originalText = button.textContent;
        button.textContent = 'Copied!';
        button.classList.add('bg-green-200');
        setTimeout(() => {
          button.textContent = originalText;
          button.classList.remove('bg-green-200');
        }, 1500);
      }
    }
  });
  
  document.getElementById('copyDirectUrl')?.addEventListener('click', () => {
    const directApiUrlInput = document.getElementById('directApiUrl');
    if (directApiUrlInput) {
      navigator.clipboard.writeText(directApiUrlInput.value);
      
      const button = document.getElementById('copyDirectUrl');
      if (button) {
        const originalText = button.textContent;
        button.textContent = 'Copied!';
        button.classList.add('bg-green-200');
        setTimeout(() => {
          button.textContent = originalText;
          button.classList.remove('bg-green-200');
        }, 1500);
      }
    }
  });
  
  // Helper function to display response
  function displayResponse(requestText, responseData, isError) {
    const requestEl = document.getElementById('request');
    const responseEl = document.getElementById('response');
    
    if (requestEl) requestEl.textContent = requestText;
    
    if (responseEl) {
      if (isError) {
        responseEl.textContent = `Error: ${responseData}`;
        responseEl.classList.add('text-red-500');
      } else {
        // Format the response data
        let formattedData = responseData;
        
        // If the response has a data property with collections, summarize them
        if (responseData.data) {
          const { data, ...rest } = responseData;
          const summary = {
            ...rest,
            data: Object.fromEntries(
              Object.entries(data).map(([key, value]) => [
                key, 
                Array.isArray(value) 
                  ? `[${value.length} items]` 
                  : value
              ])
            )
          };
          formattedData = summary;
        }
        
        responseEl.textContent = JSON.stringify(formattedData, null, 2);
        responseEl.classList.remove('text-red-500');
      }
    }
  }
  
  // Test GET on export API
  document.getElementById('testGet')?.addEventListener('click', async () => {
    try {
      displayResponse('GET /api/export', { message: 'Loading...' });
      
      const response = await fetch('/api/export', {
        method: 'GET',
        headers: {
          'Accept': 'application/json'
        }
      });
      
      const data = await response.json();
      displayResponse('GET /api/export', data);
    } catch (error) {
      displayResponse('GET /api/export', error instanceof Error ? error.message : String(error), true);
    }
  });
  
  // Test POST on export API
  document.getElementById('testExportPost')?.addEventListener('click', async () => {
    try {
      const collectionEl = document.getElementById('exportCollection');
      const collection = collectionEl ? collectionEl.value : 'services';
      
      const metadataEl = document.getElementById('includeMetadata');
      const includeMetadata = metadataEl ? metadataEl.checked : false;
      
      const statsEl = document.getElementById('includeStats');
      const includeStats = statsEl ? statsEl.checked : false;
      
      const requestBody = {
        format: 'json',
        collections: [collection],
        options: {
          includeMetadata,
          includeStats
        }
      };
      
      const requestText = `POST /api/export\n${JSON.stringify(requestBody, null, 2)}`;
      displayResponse(requestText, { message: 'Loading...' });
      
      const response = await fetch('/api/export', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(requestBody)
      });
      
      const data = await response.json();
      displayResponse(requestText, data);
    } catch (error) {
      displayResponse('POST /api/export', error instanceof Error ? error.message : String(error), true);
    }
  });
  
  // Test GET on direct collection API
  document.getElementById('testDirectGet')?.addEventListener('click', async () => {
    try {
      const collectionEl = document.getElementById('directCollection');
      const collection = collectionEl ? collectionEl.value : 'services';
      const requestText = `GET /api/${collection}`;
      
      displayResponse(requestText, { message: 'Loading...' });
      
      const response = await fetch(`/api/${collection}`, {
        method: 'GET',
        headers: {
          'Accept': 'application/json'
        }
      });
      
      const data = await response.json();
      displayResponse(requestText, data);
    } catch (error) {
      const collectionEl = document.getElementById('directCollection');
      const collection = collectionEl ? collectionEl.value : 'services';
      displayResponse(`GET /api/${collection}`, error instanceof Error ? error.message : String(error), true);
    }
  });
  
  // Test POST on direct collection API
  document.getElementById('testDirectPost')?.addEventListener('click', async () => {
    try {
      const collectionEl = document.getElementById('directCollection');
      const collection = collectionEl ? collectionEl.value : 'services';
      
      const metadataEl = document.getElementById('directIncludeMetadata');
      const includeMetadata = metadataEl ? metadataEl.checked : false;
      
      const statsEl = document.getElementById('directIncludeStats');
      const includeStats = statsEl ? statsEl.checked : false;
      
      const requestBody = {
        options: {
          includeMetadata,
          includeStats
        }
      };
      
      const requestText = `POST /api/${collection}\n${JSON.stringify(requestBody, null, 2)}`;
      displayResponse(requestText, { message: 'Loading...' });
      
      const response = await fetch(`/api/${collection}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(requestBody)
      });
      
      const data = await response.json();
      displayResponse(requestText, data);
    } catch (error) {
      const collectionEl = document.getElementById('directCollection');
      const collection = collectionEl ? collectionEl.value : 'services';
      displayResponse(`POST /api/${collection}`, error instanceof Error ? error.message : String(error), true);
    }
  });
  
  // Check all collections
  document.getElementById('checkAllCollections')?.addEventListener('click', async () => {
    const collectionCards = document.querySelectorAll('.collection-card');
    const collections = [];
    
    collectionCards.forEach(card => {
      const collection = card.dataset.collection;
      if (collection) {
        collections.push(collection);
      }
    });
    
    // Update button to show loading state
    const checkAllBtn = document.getElementById('checkAllCollections');
    if (checkAllBtn) {
      const originalText = checkAllBtn.textContent;
      checkAllBtn.textContent = 'Checking...';
      checkAllBtn.classList.add('opacity-75');
      checkAllBtn.disabled = true;
    }
    
    for (const collection of collections) {
      const card = document.querySelector(`.collection-card[data-collection="${collection}"]`);
      const statusIndicator = card?.querySelector('.status-indicator');
      const statusText = card?.querySelector('.status-text');
      const itemCount = card?.querySelector('.item-count');
      
      if (statusIndicator && statusText) {
        // Set to loading state
        statusIndicator.className = 'status-indicator w-3 h-3 rounded-full bg-yellow-500 mr-2';
        statusText.textContent = 'Checking...';
        statusText.className = 'status-text text-sm text-yellow-500';
        
        try {
          const response = await fetch(`/api/${collection}`, {
            method: 'GET',
            headers: {
              'Accept': 'application/json'
            }
          });
          
          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }
          
          const data = await response.json();
          const count = data.count || (data.data && data.data[collection] ? data.data[collection].length : 0);
          
          if (count > 0) {
            // Collection exists and has items
            statusIndicator.className = 'status-indicator w-3 h-3 rounded-full bg-green-500 mr-2';
            statusText.textContent = 'Available';
            statusText.className = 'status-text text-sm text-green-600';
            if (itemCount) itemCount.textContent = `${count} items`;
            card.classList.add('border-green-200');
          } else {
            // Collection exists but is empty
            statusIndicator.className = 'status-indicator w-3 h-3 rounded-full bg-yellow-500 mr-2';
            statusText.textContent = 'Empty';
            statusText.className = 'status-text text-sm text-yellow-600';
            if (itemCount) itemCount.textContent = '0 items';
            card.classList.add('border-yellow-200');
          }
        } catch (error) {
          // Collection endpoint doesn't exist or other error
          statusIndicator.className = 'status-indicator w-3 h-3 rounded-full bg-red-500 mr-2';
          statusText.textContent = 'Unavailable';
          statusText.className = 'status-text text-sm text-red-600';
          if (itemCount) itemCount.textContent = 'API endpoint not found';
          card.classList.add('border-red-200');
        }
      }
    }
    
    // Restore button state
    if (checkAllBtn) {
      checkAllBtn.textContent = 'Check All Collections';
      checkAllBtn.classList.remove('opacity-75');
      checkAllBtn.disabled = false;
    }
  });
  
  // Make collection cards clickable to test them
  document.querySelectorAll('.collection-card').forEach(card => {
    card.addEventListener('click', () => {
      const collection = card.dataset.collection;
      if (collection) {
        const directCollectionEl = document.getElementById('directCollection');
        if (directCollectionEl) {
          directCollectionEl.value = collection;
        }
        
        // Update the direct API URL
        const directApiUrlInput = document.getElementById('directApiUrl');
        if (directApiUrlInput) {
          directApiUrlInput.value = `/api/${collection}`;
        }
        
        const testDirectGetBtn = document.getElementById('testDirectGet');
        if (testDirectGetBtn) {
          testDirectGetBtn.click();
        }
      }
    });
  });

  // Add event listeners to test buttons in collection cards
  document.querySelectorAll('.test-collection-btn').forEach(btn => {
    btn.addEventListener('click', (e) => {
      e.stopPropagation(); // Prevent the card click event from firing
      const card = e.target.closest('.collection-card');
      const collection = card?.dataset.collection;
      
      if (collection) {
        // Set up the direct API test
        const directCollectionEl = document.getElementById('directCollection');
        if (directCollectionEl) {
          directCollectionEl.value = collection;
        }
        
        const directApiUrlInput = document.getElementById('directApiUrl');
        if (directApiUrlInput) {
          directApiUrlInput.value = `/api/${collection}`;
        }
        
        // Scroll to the test section
        const testSection = document.querySelector('.grid.grid-cols-1.lg\\:grid-cols-2');
        if (testSection) {
          testSection.scrollIntoView({ behavior: 'smooth' });
        }
        
        // Run the test after a short delay to allow scrolling
        setTimeout(() => {
          const testDirectGetBtn = document.getElementById('testDirectGet');
          if (testDirectGetBtn) {
            testDirectGetBtn.click();
          }
        }, 300);
      }
    });
  });
</script>

<script is:inline>
  // Serialize data for the client-side script
  document.currentScript.setAttribute('data-api-endpoints', JSON.stringify({apiEndpoints}));
  document.currentScript.setAttribute('data-collections', JSON.stringify({collections}));
</script>

<style>
  .collection-card {
    cursor: pointer;
    transition: all 0.2s ease;
  }
  
  .collection-card:hover {
    background-color: #f9fafb;
    transform: translateY(-2px);
    box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -1px rgb(0 0 0 / 0.06);
  }
  
  .endpoint-url {
    font-family: monospace;
  }
</style> 