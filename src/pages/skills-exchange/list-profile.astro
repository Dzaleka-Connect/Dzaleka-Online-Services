---
import MainLayout from '../../layouts/MainLayout.astro';

// Get environment variables
const CLOUDINARY_CLOUD_NAME = import.meta.env.CLOUDINARY_CLOUD_NAME;
const CLOUDINARY_UPLOAD_PRESET = import.meta.env.PUBLIC_CLOUDINARY_UPLOAD_PRESET;

const skillCategories = {
  'Arts & Crafts': [
    'Painting',
    'Drawing',
    'Sculpture',
    'Photography',
    'Pottery',
    'Weaving',
    'Jewelry Making',
    'Woodworking',
    'Textile Art',
    'Printmaking'
  ],
  'Music & Performance': [
    'Singing',
    'Guitar',
    'Piano',
    'Drums',
    'Dance',
    'Traditional Music',
    'Music Production',
    'Theater',
    'Public Speaking',
    'Voice Acting'
  ],
  'Technology': [
    'Web Development',
    'Mobile App Development',
    'Graphic Design',
    'Digital Marketing',
    'Computer Basics',
    'Social Media Management',
    'Video Editing',
    'Data Entry',
    'IT Support',
    'Cybersecurity'
  ],
  'Languages': [
    'English',
    'French',
    'Swahili',
    'Arabic',
    'Chichewa',
    'Portuguese',
    'Sign Language',
    'Translation',
    'Interpretation'
  ],
  'Business & Professional': [
    'Business Planning',
    'Accounting',
    'Marketing',
    'Project Management',
    'Leadership',
    'Sales',
    'Customer Service',
    'Entrepreneurship',
    'Event Planning',
    'Grant Writing'
  ],
  'Education & Tutoring': [
    'Mathematics',
    'Science',
    'History',
    'Literature',
    'Writing',
    'Test Preparation',
    'Special Education',
    'Early Childhood Education'
  ],
  'Health & Wellness': [
    'Fitness Training',
    'Yoga',
    'Nutrition',
    'Mental Health Support',
    'First Aid',
    'Sports Coaching',
    'Meditation',
    'Traditional Medicine',
    'Health Education'
  ],
  'Trades & Vocational': [
    'Carpentry',
    'Plumbing',
    'Electrical',
    'Welding',
    'Auto Repair',
    'Construction',
    'Tailoring',
    'Hairdressing',
    'Cooking',
    'Agriculture'
  ],
  'Community Services': [
    'Youth Mentoring',
    'Elder Care',
    'Community Organization',
    'Conflict Resolution',
    'Environmental Education',
    'Disability Support',
    'Cultural Preservation',
    'Volunteer Management'
  ]
};

// Flatten categories for the select field
const allSkills = Object.entries(skillCategories).reduce((acc, [category, skills]) => {
  return [...acc, ...skills.map(skill => `${category} - ${skill}`)];
}, []).sort();

const formFields = [
  {
    name: 'name',
    label: 'Full Name',
    type: 'text',
    required: true,
  },
  {
    name: 'skill',
    label: 'Skill',
    type: 'select',
    options: allSkills,
    required: true,
  },
  {
    name: 'category',
    label: 'Category',
    type: 'select',
    options: Object.keys(skillCategories),
    required: true,
  },
  {
    name: 'level',
    label: 'Experience Level',
    type: 'select',
    options: ['Beginner', 'Intermediate', 'Advanced'],
    required: true,
  },
  {
    name: 'status',
    label: 'Availability Status',
    type: 'select',
    options: ['Available', 'Unavailable', 'Limited'],
    required: true,
  },
  {
    name: 'location',
    label: 'Location',
    type: 'text',
    required: true,
  },
  {
    name: 'email',
    label: 'Email',
    type: 'email',
    required: true,
  },
  {
    name: 'phone',
    label: 'Phone Number',
    type: 'tel',
    required: true,
  },
  {
    name: 'website',
    label: 'Website (Optional)',
    type: 'url',
    required: false,
  },
  {
    name: 'socialMedia.instagram',
    label: 'Instagram Profile (Optional)',
    type: 'url',
    required: false,
  },
  {
    name: 'socialMedia.twitter',
    label: 'Twitter Profile (Optional)',
    type: 'url',
    required: false,
  },
  {
    name: 'socialMedia.linkedin',
    label: 'LinkedIn Profile (Optional)',
    type: 'url',
    required: false,
  },
];

const paymentFields = [
  {
    name: 'service_type',
    label: 'Service Type',
    type: 'select',
    options: ['Free', 'Paid'],
    required: true,
  },
  {
    name: 'rate',
    label: 'Hourly Rate (MWK)',
    type: 'number',
    required: false,
    placeholder: 'e.g., 5000',
    showWhen: 'paid'
  },
  {
    name: 'payment_method',
    label: 'Payment Method',
    type: 'select',
    options: ['Airtel Money', 'TNM Mpamba'],
    required: false,
    showWhen: 'paid'
  },
  {
    name: 'airtel_number',
    label: 'Airtel Money Number',
    type: 'tel',
    required: false,
    placeholder: '265xxxxxxxxx',
    showWhen: 'paid'
  },
  {
    name: 'mpamba_number',
    label: 'TNM Mpamba Number',
    type: 'tel',
    required: false,
    placeholder: '265xxxxxxxxx',
    showWhen: 'paid'
  }
];

const paymentMethodFields = [
  {
    name: 'paymentMethods',
    label: 'Payment Methods',
    type: 'multiSelect',
    options: ['Airtel Money', 'TNM Mpamba'],
    required: false,
  },
];

---

<MainLayout title="List Your Skills">
  <div class="max-w-4xl mx-auto px-4 py-8 sm:px-6 lg:px-8">
    <div class="mb-8">
      <a
        href="/skills-exchange"
        class="inline-flex items-center text-sm font-medium text-gray-600 hover:text-primary-600"
      >
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-5 h-5 mr-2">
          <path d="M10 19l-7-7m0 0l7-7m-7 7h18"/>
        </svg>
        Back to Skills Exchange
      </a>
    </div>

    <div class="bg-white shadow rounded-lg">
      <div class="px-4 py-5 sm:p-6">
        <h1 class="text-2xl font-bold text-gray-900 mb-6">List Your Skills</h1>
        
        <div class="bg-primary-50 border-l-4 border-primary-600 p-4 mb-8">
          <div class="flex items-start">
            <div class="flex-shrink-0">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-primary-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
            </div>
            <div class="ml-3">
              <h3 class="text-sm font-medium text-primary-800">Share Your Skills</h3>
              <p class="mt-2 text-sm text-primary-700">
                List your skills and start connecting with learners in the community. Create a detailed profile to showcase your expertise.
              </p>
            </div>
          </div>
        </div>

        <form 
          action="https://formspree.io/f/xqaaajae" 
          method="POST" 
          class="space-y-8"
          data-thankyou-url="/thank-you?type=profile"
          id="profileForm"
        >
          <!-- Profile Image Upload -->
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">
              Profile Image
            </label>
            <div class="flex items-center space-x-4">
              <div class="w-24 h-24 rounded-full bg-gray-100 flex items-center justify-center">
                <img id="preview" class="w-24 h-24 rounded-full object-cover hidden">
                <svg id="placeholder" xmlns="http://www.w3.org/2000/svg" class="w-8 h-8 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                </svg>
              </div>
              <div>
                <input 
                  type="file" 
                  id="imageUpload" 
                  accept="image/*"
                  class="sr-only"
                >
                <input type="hidden" name="profileImage" id="profileImageUrl">
                <button
                  type="button"
                  onclick="document.getElementById('imageUpload').click()"
                  class="inline-flex items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500"
                >
                  Upload Photo
                </button>
              </div>
            </div>
          </div>

          <!-- Basic Information -->
          <div class="grid grid-cols-1 gap-6 sm:grid-cols-2">
            {formFields.map((field) => (
              <div>
                <label for={field.name} class="block text-sm font-medium text-gray-700 mb-2">
                  {field.label} {field.required && <span class="text-red-500">*</span>}
                </label>
                {field.type === 'select' ? (
                  <select
                    id={field.name}
                    name={field.name}
                    required={field.required}
                    class="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-primary-500 focus:border-primary-500 sm:text-sm rounded-md"
                  >
                    <option value="">Select {field.label}</option>
                    {field.options?.map((option) => (
                      <option value={option}>{option}</option>
                    ))}
                  </select>
                ) : field.type === 'textarea' ? (
                  <textarea
                    id={field.name}
                    name={field.name}
                    required={field.required}
                    rows={4}
                    class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 sm:text-sm"
                  />
                ) : (
                  <input
                    type={field.type}
                    id={field.name}
                    name={field.name}
                    required={field.required}
                    class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 sm:text-sm"
                  />
                )}
              </div>
            ))}
          </div>

          <!-- Description -->
          <div>
            <label
              for="shortDescription"
              class="block text-sm font-medium text-gray-700 mb-2"
            >
              Short Description <span class="text-red-500">*</span>
            </label>
            <input
              type="text"
              id="shortDescription"
              name="shortDescription"
              required
              maxlength="150"
              placeholder="Brief description of your skills (max 150 characters)"
              class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 sm:text-sm"
            />
          </div>

          <div>
            <label
              for="description"
              class="block text-sm font-medium text-gray-700 mb-2"
            >
              Detailed Description <span class="text-red-500">*</span>
            </label>
            <textarea
              id="description"
              name="description"
              rows="4"
              required
              placeholder="Describe your skills, experience, and what you offer"
              class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 sm:text-sm"
            ></textarea>
          </div>

          <!-- Payment Information -->
          <div class="border-t border-gray-200 pt-8">
            <h3 class="text-lg font-medium text-gray-900 mb-6">Payment Information</h3>
            <div class="grid grid-cols-1 gap-6 sm:grid-cols-2">
              {paymentFields.map((field) => (
                <div data-show-when={field.showWhen}>
                  <label for={field.name} class="block text-sm font-medium text-gray-700 mb-2">
                    {field.label} {field.required && <span class="text-red-500">*</span>}
                  </label>
                  {field.type === 'select' ? (
                    <select
                      id={field.name}
                      name={field.name}
                      required={field.required}
                      class="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-primary-500 focus:border-primary-500 sm:text-sm rounded-md"
                    >
                      <option value="">Select {field.label}</option>
                      {field.options?.map((option) => (
                        <option value={option}>{option}</option>
                      ))}
                    </select>
                  ) : (
                    <input
                      type={field.type}
                      id={field.name}
                      name={field.name}
                      required={field.required}
                      placeholder={field.placeholder}
                      class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 sm:text-sm"
                    />
                  )}
                </div>
              ))}
            </div>
          </div>

          <!-- Submit Button -->
          <div class="pt-6">
            <button
              type="submit"
              class="w-full flex justify-center py-3 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500"
            >
              List My Skills
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>
</MainLayout>

<script define:vars={{ CLOUDINARY_CLOUD_NAME, CLOUDINARY_UPLOAD_PRESET }}>
  // Make handleImageUpload available globally
  window.handleImageUpload = async function(event) {
    const file = event.target.files[0];
    if (!file) return;

    // Show preview
    const preview = document.getElementById('preview');
    const placeholder = document.getElementById('placeholder');
    const reader = new FileReader();
    
    reader.onload = function(e) {
      preview.src = e.target.result;
      preview.classList.remove('hidden');
      placeholder.classList.add('hidden');
    }
    reader.readAsDataURL(file);

    // Upload to Cloudinary
    const formData = new FormData();
    formData.append('file', file);
    formData.append('upload_preset', CLOUDINARY_UPLOAD_PRESET);

    try {
      const response = await fetch(
        `https://api.cloudinary.com/v1_1/${CLOUDINARY_CLOUD_NAME}/image/upload`,
        {
          method: 'POST',
          body: formData,
        }
      );

      const data = await response.json();
      document.getElementById('profileImageUrl').value = data.secure_url;
    } catch (error) {
      console.error('Error uploading image:', error);
      alert('Failed to upload image. Please try again.');
    }
  };

  // Add event listener to file input
  document.getElementById('imageUpload').addEventListener('change', window.handleImageUpload);

  // Form submission
  const form = document.getElementById('profileForm');
  
  form.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    try {
      const response = await fetch(form.action, {
        method: 'POST',
        body: new FormData(form),
        headers: {
          'Accept': 'application/json'
        }
      });
      
      if (response.ok) {
        window.location.href = form.dataset.thankyouUrl;
      } else {
        throw new Error('Form submission failed');
      }
    } catch (error) {
      console.error('Error:', error);
      alert('Failed to submit form. Please try again.');
    }
  });

  // Handle payment type selection
  const serviceTypeSelect = document.querySelector('select[name="service_type"]');
  const paidFields = document.querySelectorAll('[data-show-when="paid"]');
  
  function updatePaymentFields() {
    const isPaid = serviceTypeSelect.value.toLowerCase() === 'paid';
    paidFields.forEach(field => {
      const fieldContainer = field.closest('div');
      if (isPaid) {
        fieldContainer.style.display = 'block';
        field.required = true;
      } else {
        fieldContainer.style.display = 'none';
        field.required = false;
        field.value = ''; // Clear the field value
      }
    });
  }
  
  serviceTypeSelect.addEventListener('change', updatePaymentFields);
  // Run once on page load
  updatePaymentFields();
</script>

<style>
  /* Add any custom styles here */
</style>
