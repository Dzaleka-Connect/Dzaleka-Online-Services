---
import MainLayout from '../../layouts/MainLayout.astro';
import { updates } from '../../data/updates';
import { format } from 'date-fns';

export async function getStaticPaths() {
    const itemsPerPage = 5;
    const totalPages = Math.ceil(updates.length / itemsPerPage);
    
    return Array.from({ length: totalPages }, (_, i) => {
        const page = i + 1;
        const start = i * itemsPerPage;
        const end = start + itemsPerPage;
        return {
            params: { page: page.toString() },
            props: { 
                page,
                totalPages,
                currentUpdates: updates.slice(start, end)
            }
        };
    });
}

const { page, totalPages, currentUpdates } = Astro.props;

// Validate page number
const pageNum = parseInt(page);
if (isNaN(pageNum) || pageNum < 1 || pageNum > totalPages) {
    return Astro.redirect('/updates/1');
}

// Helper function to get type style
const getTypeStyle = (type: string) => {
    switch (type) {
        case 'feature':
            return {
                bg: 'bg-blue-100',
                text: 'text-blue-600',
                icon: `<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z" />
                </svg>`
            };
        case 'data':
            return {
                bg: 'bg-teal-100',
                text: 'text-teal-600',
                icon: `<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
                </svg>`
            };
        case 'announcement':
            return {
                bg: 'bg-purple-100',
                text: 'text-purple-600',
                icon: `<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5.882V19.24a1.76 1.76 0 01-3.417.592l-2.147-6.15M18 13a3 3 0 100-6M5.436 13.683A4.001 4.001 0 017 6h1.832c4.1 0 7.625-1.234 9.168-3v14c-1.543-1.766-5.067-3-9.168-3H7a3.988 3.988 0 01-1.564-.317z" />
                </svg>`
            };
        default:
            return {
                bg: 'bg-gray-100',
                text: 'text-gray-600',
                icon: `<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 3v2m6-2v2M9 19v2m6-2v2M5 9H3m2 6H3m18-6h-2m2 6h-2M7 19h10a2 2 0 002-2V7a2 2 0 00-2-2H7a2 2 0 00-2 2v10a2 2 0 002 2zM9 9h6v6H9V9z" />
                </svg>`
            };
    }
};

// Helper function to generate pagination range
const getPaginationRange = (current: number, total: number) => {
    const delta = 2;
    const range = [];
    const rangeWithDots = [];
    let l;

    range.push(1);

    if (total <= 1) return range;

    for (let i = current - delta; i <= current + delta; i++) {
        if (i < total && i > 1) {
            range.push(i);
        }
    }
    range.push(total);

    for (let i = 0; i < range.length; i++) {
        if (l) {
            if (range[i] - l === 2) {
                rangeWithDots.push(l + 1);
            } else if (range[i] - l !== 1) {
                rangeWithDots.push('...');
            }
        }
        rangeWithDots.push(range[i]);
        l = range[i];
    }

    return rangeWithDots;
};

const paginationRange = getPaginationRange(pageNum, totalPages);
---

<MainLayout title={`Latest Updates - Page ${page} - Dzaleka Online Services`}>
    <main class="py-16">
        <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
            <div class="text-center mb-12">
                <h1 class="text-4xl font-bold text-gray-900">Latest Updates</h1>
                <p class="mt-4 text-lg text-gray-600">
                    Stay informed about new features, improvements, and announcements
                </p>
            </div>

            <div class="space-y-8">
                {currentUpdates.map((update, index) => {
                    const style = getTypeStyle(update.type);
                    const globalIndex = (pageNum - 1) * 5 + index;
                    return (
                        <a 
                            href={`/updates/view/${globalIndex}`}
                            class="block bg-white rounded-lg shadow-sm hover:shadow-md transition-shadow duration-200 p-6"
                        >
                            <div class="flex items-start space-x-4">
                                <div class={`flex-shrink-0 ${style.text}`} set:html={style.icon} />
                                <div class="flex-1">
                                    <div class="flex items-center space-x-2">
                                        <h3 class="text-lg font-semibold text-gray-900">
                                            {update.title}
                                        </h3>
                                        <span class={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${style.bg} ${style.text}`}>
                                            {update.type}
                                        </span>
                                    </div>
                                    <p class="mt-1 text-gray-600">{update.text}</p>
                                    <time class="mt-2 block text-sm text-gray-500">
                                        {format(new Date(update.date), 'MMMM d, yyyy')}
                                    </time>
                                </div>
                            </div>
                        </a>
                    );
                })}
            </div>

            {totalPages > 1 && (
                <nav class="mt-12 flex items-center justify-center" aria-label="Pagination">
                    <div class="flex items-center space-x-2">
                        {pageNum > 1 && (
                            <a
                                href={`/updates/${pageNum - 1}`}
                                class="inline-flex items-center px-3 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 bg-white hover:bg-gray-50"
                                aria-label="Previous page"
                            >
                                <svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                                    <path fill-rule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clip-rule="evenodd" />
                                </svg>
                            </a>
                        )}

                        {paginationRange.map((num) => (
                            num === '...' 
                                ? <span class="px-3 py-2">...</span>
                                : <a
                                    href={`/updates/${num}`}
                                    class:list={[
                                        'inline-flex items-center px-4 py-2 border rounded-md text-sm font-medium',
                                        num === pageNum
                                            ? 'z-10 bg-blue-50 border-blue-500 text-blue-600'
                                            : 'border-gray-300 text-gray-700 hover:bg-gray-50'
                                    ]}
                                    aria-current={num === pageNum ? 'page' : undefined}
                                >
                                    {num}
                                </a>
                        ))}

                        {pageNum < totalPages && (
                            <a
                                href={`/updates/${pageNum + 1}`}
                                class="inline-flex items-center px-3 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 bg-white hover:bg-gray-50"
                                aria-label="Next page"
                            >
                                <svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                                    <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
                                </svg>
                            </a>
                        )}
                    </div>
                </nav>
            )}
        </div>
    </main>
</MainLayout>
