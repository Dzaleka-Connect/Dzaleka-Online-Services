---
// src/pages/resources/[...page].astro
import Layout from '../../layouts/Layout.astro';
import ResourceGrid from '../../components/resources/ResourceGrid.astro';
import SearchBar from '../../components/ui/SearchBar.astro';
import { getCollection } from 'astro:content';
import ResourcePagination from '../../components/resources/ResourcePagination.astro';

export async function getStaticPaths({ paginate }) {
  const allResources = await getCollection('resources');
  
  // Get unique categories
  const categories = [...new Set(allResources.map(resource => resource.data.category))].filter(Boolean).sort();
  
  // Sort resources by date
  const sortedResources = allResources.sort((a, b) => {
    const dateA = new Date(a.data.lastUpdated || a.data.date);
    const dateB = new Date(b.data.lastUpdated || b.data.date);
    return dateB.getTime() - dateA.getTime();
  });

  return paginate(sortedResources, { pageSize: 6 });
}

const { page } = Astro.props;
const { search, category } = Astro.url.searchParams;

// Get unique categories for the filter dropdown
const allResources = await getCollection('resources');
const categories = [...new Set(allResources.map(resource => resource.data.category))].filter(Boolean).sort();

// Filter resources based on search and category
let filteredResources = page.data;

if (search) {
  const searchLower = search.toLowerCase();
  filteredResources = filteredResources.filter(resource => 
    resource.data.title.toLowerCase().includes(searchLower) ||
    resource.data.description.toLowerCase().includes(searchLower) ||
    resource.data.author?.toLowerCase().includes(searchLower) ||
    resource.data.category.toLowerCase().includes(searchLower)
  );
}

if (category) {
  filteredResources = filteredResources.filter(resource => 
    resource.data.category === category
  );
}

// Sort resources by date
const sortedResources = filteredResources.sort((a, b) => {
  const dateA = new Date(a.data.lastUpdated || a.data.date);
  const dateB = new Date(b.data.lastUpdated || b.data.date);
  return dateB.getTime() - dateA.getTime();
});

// Build pagination URL with search params
function buildPaginationUrl(pageNum: number) {
  const searchParams = new URLSearchParams();
  if (search) searchParams.set('search', search);
  if (category) searchParams.set('category', category);
  const queryString = searchParams.toString();
  return `/resources${pageNum > 1 ? `/${pageNum}` : ''}${queryString ? `?${queryString}` : ''}`;
}

// Category color mapping
const categoryColors = {
  'Report': 'bg-purple-100 text-purple-800',
  'Guide': 'bg-green-100 text-green-800',
  'Factsheet': 'bg-blue-100 text-blue-800',
  'Document': 'bg-gray-100 text-gray-800',
  'Research': 'bg-indigo-100 text-indigo-800'
};

---

<Layout title="Resource Hub">
  <main class="container mx-auto px-4 py-8">
    {/* Hero Section */}
    <section class="relative bg-gradient-to-br from-primary-900 via-primary-800 to-primary-600 rounded-2xl mb-12 overflow-hidden">
      {/* Background Pattern */}
      <div class="absolute inset-0 opacity-10">
        <div class="absolute inset-0" style="background-image: url('data:image/svg+xml,%3Csvg width=\'60\' height=\'60\' viewBox=\'0 0 60 60\' xmlns=\'http://www.w3.org/2000/svg\'%3E%3Cg fill=\'none\' fill-rule=\'evenodd\'%3E%3Cg fill=\'%23ffffff\' fill-opacity=\'0.4\'%3E%3Cpath d=\'M36 34v-4h-2v4h-4v2h4v4h2v-4h4v-2h-4zm0-30V0h-2v4h-4v2h4v4h2V6h4V4h-4zM6 34v-4H4v4H0v2h4v4h2v-4h4v-2H6zM6 4V0H4v4H0v2h4v4h2V6h4V4H6z\'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E');">
        </div>
      </div>
      
      <div class="relative max-w-4xl mx-auto px-6 py-16 text-center">
        <span class="inline-block px-4 py-1.5 bg-white/10 backdrop-blur-sm text-white rounded-full text-sm font-medium mb-4">
          Explore Our Resources
        </span>
        <h1 class="text-4xl md:text-5xl font-bold text-white mb-6">
          Dzaleka Heritage Resources
        </h1>
        <p class="text-lg md:text-xl text-white/90 max-w-2xl mx-auto mb-8">
          Access a curated collection of documents, reports, and media about Dzaleka Refugee Camp
        </p>
        
        <div class="flex flex-col sm:flex-row gap-4 justify-center">
          <a 
            href="/resources/submit" 
            class="inline-flex items-center justify-center px-6 py-3 bg-white text-primary-600 rounded-lg hover:bg-primary-50 transition-colors group"
          >
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2 transition-transform group-hover:scale-110" viewBox="0 0 20 20" fill="currentColor">
              <path fill-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clip-rule="evenodd" />
            </svg>
            Submit a Resource
          </a>
        </div>

        {/* Search Form */}
        <div class="mt-8 max-w-2xl mx-auto">
          <form 
            action="/resources" 
            method="get" 
            class="flex flex-col sm:flex-row gap-4"
          >
            <div class="flex-1">
              <div class="relative">
                <input 
                  type="text"
                  id="searchInput"
                  name="search"
                  placeholder="Search resources..."
                  value={search}
                  class="w-full px-4 py-3 pl-11 bg-white/10 backdrop-blur-sm text-white placeholder-white/70 rounded-lg border border-white/20 focus:outline-none focus:ring-2 focus:ring-white/30"
                />
                <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-white/70" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clip-rule="evenodd" />
                  </svg>
                </div>
              </div>
            </div>

            <select 
              name="category"
              class="px-4 py-3 bg-white/10 backdrop-blur-sm text-white rounded-lg border border-white/20 focus:outline-none focus:ring-2 focus:ring-white/30"
            >
              <option value="">All Categories</option>
              {categories.map(category => (
                <option 
                  value={category}
                  selected={category === category}
                  class="text-gray-900"
                >
                  {category}
                </option>
              ))}
            </select>

            <button 
              type="submit"
              class="px-6 py-3 bg-white text-primary-600 rounded-lg hover:bg-primary-50 transition-colors flex items-center justify-center"
            >
              Search
            </button>
          </form>
        </div>

      {/* Decorative Elements */}
      <div class="absolute bottom-0 left-0 w-24 h-24 bg-white/5 rounded-full -translate-x-1/2 translate-y-1/2"></div>
      <div class="absolute top-0 right-0 w-32 h-32 bg-white/5 rounded-full translate-x-1/2 -translate-y-1/2"></div>
    </section>

    {/* Resources Grid */}
    <section>
      {filteredResources.length > 0 ? (
        <>
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-8 mb-12">
            {sortedResources.map(resource => (
              <a 
                href={`/resources/${resource.slug}`} 
                class="group block transform hover:scale-[1.02] transition-all duration-200"
              >
                <article class="bg-white rounded-xl shadow-sm hover:shadow-md transition-shadow p-6">
                  <div class="flex justify-between items-start mb-4">
                    <h2 class="text-xl font-semibold text-gray-900 group-hover:text-primary-600 transition-colors">
                      {resource.data.title}
                    </h2>
                    {resource.data.fileType === 'pdf' ? (
                      <span class="text-red-600">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 21h10a2 2 0 002-2V9.414a1 1 0 00-.293-.707l-5.414-5.414A1 1 0 0012.586 3H7a2 2 0 00-2 2v14a2 2 0 002 2z" />
                        </svg>
                      </span>
                    ) : (
                      <span class="text-blue-600">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1" />
                        </svg>
                      </span>
                    )}
                  </div>
                  
                  <p class="text-gray-600 mb-4 line-clamp-2">{resource.data.description}</p>
                  
                  <div class="flex items-center justify-between">
                    <div class="flex items-center space-x-2">
                      <span class={`px-2.5 py-0.5 rounded-full text-xs font-medium ${categoryColors[resource.data.category] || 'bg-gray-100 text-gray-800'}`}>
                        {resource.data.category}
                      </span>
                      {resource.data.featured && (
                        <span class="px-2.5 py-0.5 rounded-full text-xs font-medium bg-primary-100 text-primary-800">
                          Featured
                        </span>
                      )}
                    </div>
                    <time class="text-sm text-gray-500" datetime={resource.data.lastUpdated || resource.data.date}>
                      {new Date(resource.data.lastUpdated || resource.data.date).toLocaleDateString()}
                    </time>
                  </div>
                </article>
              </a>
            ))}
          </div>

          {page.total > page.size && (
            <ResourcePagination 
              currentPage={page.currentPage}
              totalPages={Math.ceil(page.total / page.size)}
              baseUrl="/resources"
              searchQuery={search}
              category={category}
            />
          )}
        </>
      ) : (
        <div class="text-center py-12">
          <h3 class="text-lg font-medium text-gray-900 mb-2">No resources found</h3>
          <p class="text-gray-600">Try adjusting your search or filter criteria</p>
        </div>
      )}
    </section>
  </main>
</Layout>

<style is:global>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>