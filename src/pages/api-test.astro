---
import MainLayout from '../layouts/MainLayout.astro';
---

<MainLayout title="API Test - Dzaleka Heritage Archive">
  <main class="min-h-screen bg-gray-50">
    <div class="max-w-7xl mx-auto px-4 py-12">
      <!-- Header -->
      <div class="mb-8">
        <h1 class="text-3xl font-bold text-gray-900">API Test Page</h1>
        <p class="mt-2 text-gray-600">Use this page to test API endpoints and diagnose issues</p>
      </div>

      <!-- API Test Section -->
      <div class="bg-white rounded-xl shadow-sm p-6 mb-8" id="test-section">
        <h2 class="text-xl font-bold text-gray-900 mb-4">Export API Test</h2>
        <p class="text-gray-600 mb-6">
          Test the export API endpoint to ensure it's working correctly. This tool will help diagnose any issues with the API.
        </p>
        
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          <!-- Test Options -->
          <div>
            <h3 class="text-lg font-semibold text-gray-900 mb-4">Test Configuration</h3>
            <div class="space-y-4">
              <div>
                <label for="api-url" class="block text-sm font-medium text-gray-700 mb-1">API URL</label>
                <input type="text" id="api-url" class="shadow-sm focus:ring-primary-500 focus:border-primary-500 block w-full sm:text-sm border-gray-300 rounded-md" value="/api/export">
              </div>
              
              <div>
                <label for="test-collection" class="block text-sm font-medium text-gray-700 mb-1">Collection to Test</label>
                <select id="test-collection" class="shadow-sm focus:ring-primary-500 focus:border-primary-500 block w-full sm:text-sm border-gray-300 rounded-md">
                  <option value="services">Services</option>
                  <option value="resources">Resources</option>
                  <option value="events">Events</option>
                  <option value="photos">Photos</option>
                  <option value="profiles">Profiles</option>
                  <option value="talents">Talents</option>
                  <option value="jobs">Jobs</option>
                  <option value="docs">Docs</option>
                  <option value="community-voices">Community Voices</option>
                  <option value="news">News</option>
                  <option value="pages">Pages</option>
                  <option value="all">All Collections</option>
                </select>
              </div>
              
              <div>
                <label for="test-format" class="block text-sm font-medium text-gray-700 mb-1">Format</label>
                <select id="test-format" class="shadow-sm focus:ring-primary-500 focus:border-primary-500 block w-full sm:text-sm border-gray-300 rounded-md">
                  <option value="json">JSON</option>
                  <option value="csv">CSV</option>
                </select>
              </div>
              
              <div class="space-y-2">
                <label class="block text-sm font-medium text-gray-700">Date Range (Optional)</label>
                <div class="grid grid-cols-2 gap-4">
                  <div>
                    <label for="date-start" class="block text-xs text-gray-500 mb-1">Start Date</label>
                    <input type="date" id="date-start" class="shadow-sm focus:ring-primary-500 focus:border-primary-500 block w-full sm:text-sm border-gray-300 rounded-md">
                  </div>
                  <div>
                    <label for="date-end" class="block text-xs text-gray-500 mb-1">End Date</label>
                    <input type="date" id="date-end" class="shadow-sm focus:ring-primary-500 focus:border-primary-500 block w-full sm:text-sm border-gray-300 rounded-md">
                  </div>
                </div>
                <div class="flex items-center">
                  <input id="use-date-range" type="checkbox" class="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded">
                  <label for="use-date-range" class="ml-2 block text-sm text-gray-700">Apply Date Filter</label>
                </div>
              </div>
              
              <div class="flex items-center">
                <input id="include-metadata" type="checkbox" class="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded" checked>
                <label for="include-metadata" class="ml-2 block text-sm text-gray-700">Include Metadata</label>
              </div>
              
              <div class="flex items-center">
                <input id="include-stats" type="checkbox" class="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded" checked>
                <label for="include-stats" class="ml-2 block text-sm text-gray-700">Include Stats</label>
              </div>
              
              <div class="pt-4 flex space-x-2">
                <button type="button" id="test-button" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500">
                  <svg class="mr-2 -ml-1 h-5 w-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z" />
                  </svg>
                  Test API Endpoint
                </button>
                
                <button type="button" id="simple-test-button" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                  Simple Test
                </button>
              </div>
            </div>
          </div>
          
          <!-- Test Results -->
          <div>
            <h3 class="text-lg font-semibold text-gray-900 mb-4">Test Results</h3>
            <div class="bg-gray-50 rounded-lg p-4 h-64 overflow-auto">
              <pre id="test-results" class="text-sm text-gray-800 whitespace-pre-wrap">Results will appear here...</pre>
            </div>
            
            <div class="mt-4 flex items-center">
              <div id="status-indicator" class="w-4 h-4 rounded-full bg-gray-300 mr-2"></div>
              <span id="status-text" class="text-sm text-gray-600">Ready to test</span>
            </div>
            
            <!-- Response Statistics -->
            <div id="response-stats" class="mt-4 p-4 bg-gray-50 rounded-lg hidden">
              <h4 class="text-sm font-medium text-gray-700 mb-2">Response Statistics</h4>
              <div class="grid grid-cols-2 gap-4 text-sm">
                <div>
                  <p><span class="font-medium">Total Items:</span> <span id="stats-total-items">0</span></p>
                  <p><span class="font-medium">Collections:</span> <span id="stats-collections">None</span></p>
                  <p><span class="font-medium">Format:</span> <span id="stats-format">None</span></p>
                </div>
                <div>
                  <p><span class="font-medium">Response Size:</span> <span id="stats-size">0 KB</span></p>
                  <p><span class="font-medium">Processing Time:</span> <span id="stats-time">0 ms</span></p>
                  <div class="mt-2">
                    <div class="w-full bg-gray-200 rounded-full h-2.5">
                      <div id="stats-size-bar" class="bg-primary-600 h-2.5 rounded-full" style="width: 0%"></div>
                    </div>
                    <p class="text-xs text-gray-500 mt-1">Response size indicator</p>
                  </div>
                </div>
              </div>
            </div>
            
            <div class="mt-4">
              <button type="button" id="download-test-result" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 hidden">
                <svg class="mr-2 -ml-1 h-5 w-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4" />
                </svg>
                Download Test Result
              </button>
            </div>
          </div>
        </div>
        
        <!-- Network Information -->
        <div class="mt-8 pt-6 border-t border-gray-200">
          <h3 class="text-lg font-semibold text-gray-900 mb-4">Network Information</h3>
          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <h4 class="text-sm font-medium text-gray-700 mb-2">Request Details</h4>
              <div class="bg-gray-50 rounded-lg p-4 h-32 overflow-auto">
                <pre id="request-details" class="text-xs text-gray-800 whitespace-pre-wrap">No request made yet</pre>
              </div>
            </div>
            <div>
              <h4 class="text-sm font-medium text-gray-700 mb-2">Response Headers</h4>
              <div class="bg-gray-50 rounded-lg p-4 h-32 overflow-auto">
                <pre id="response-headers" class="text-xs text-gray-800 whitespace-pre-wrap">No response received yet</pre>
              </div>
            </div>
          </div>
        </div>
        
        <!-- Troubleshooting Tips -->
        <div class="mt-8 pt-6 border-t border-gray-200">
          <h3 class="text-lg font-semibold text-gray-900 mb-4">Troubleshooting Tips</h3>
          <ul class="list-disc pl-5 space-y-2 text-sm text-gray-700">
            <li><strong>404 Not Found</strong>: Check if the API endpoint path is correct. Make sure the API route exists at <code>/api/export</code>.</li>
            <li><strong>500 Internal Server Error</strong>: There might be an error in the API implementation. Check server logs for details. Common causes include:
              <ul class="list-circle pl-5 mt-1 space-y-1">
                <li>Invalid collection names (use the dropdown to select valid collections)</li>
                <li>Issues with data structure in collections</li>
                <li>Server-side processing errors</li>
              </ul>
            </li>
            <li><strong>400 Bad Request</strong>: The API request was invalid. Ensure:
              <ul class="list-circle pl-5 mt-1 space-y-1">
                <li>The request body is properly formatted JSON</li>
                <li>All required fields are included (collections, format, etc.)</li>
                <li>Collection names are valid</li>
              </ul>
            </li>
            <li><strong>Empty Results</strong>: If you receive empty data:
              <ul class="list-circle pl-5 mt-1 space-y-1">
                <li>The collection might be empty or not exist</li>
                <li>Date filters might be excluding all data</li>
                <li>Try a different collection from the dropdown</li>
              </ul>
            </li>
            <li><strong>JSON Parse Error</strong>: The API might be returning HTML instead of JSON. This often happens with server errors.</li>
            <li><strong>Network Error</strong>: Check your internet connection and ensure the server is running.</li>
            <li><strong>Empty Collections</strong>: If collections are showing as empty:
              <ul class="list-circle pl-5 mt-1 space-y-1">
                <li>Check if content files exist in <code>src/content/[collection-name]/</code> directory</li>
                <li>Ensure content files follow the correct schema defined in <code>src/content/config.ts</code></li>
                <li>Add new content files to populate empty collections</li>
                <li>Restart the development server after adding new content files</li>
              </ul>
            </li>
          </ul>
          
          <!-- Collection Status Section -->
          <div class="mt-6 p-4 bg-gray-50 rounded-lg">
            <h4 class="text-sm font-medium text-gray-800 mb-3">Collection Status</h4>
            <p class="text-sm text-gray-600 mb-3">
              This section shows the status of each collection. Click "Check Collections" to verify which collections are available and contain data.
              <span class="text-primary-600 font-medium">Click on any collection indicator to quickly test it.</span>
            </p>
            
            <div id="collection-status" class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-3 mb-4">
              <!-- Collection status indicators will be added here -->
            </div>
            
            <div class="flex justify-between items-center">
              <button type="button" id="check-collections" class="inline-flex items-center px-3 py-1.5 border border-transparent text-xs font-medium rounded-md text-indigo-700 bg-indigo-100 hover:bg-indigo-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                Check Collections
              </button>
              
              <div class="flex items-center text-xs text-gray-500">
                <div class="w-2 h-2 rounded-full bg-green-500 mr-1"></div>
                <span class="mr-3">Available</span>
                <div class="w-2 h-2 rounded-full bg-yellow-500 mr-1"></div>
                <span class="mr-3">Empty</span>
                <div class="w-2 h-2 rounded-full bg-red-500 mr-1"></div>
                <span>Error</span>
              </div>
            </div>
          </div>
          
          <div class="mt-4 p-4 bg-blue-50 rounded-lg">
            <h4 class="text-sm font-medium text-blue-800 mb-2">API Status Check</h4>
            <p class="text-sm text-blue-700">
              You can perform a simple API status check by sending a GET request to <code>/api/export</code>. 
              This will return basic information about the API, including available collections.
            </p>
            <div class="mt-2 flex space-x-2">
              <button type="button" id="check-api-status" class="inline-flex items-center px-3 py-1.5 border border-transparent text-xs font-medium rounded-md text-blue-700 bg-blue-100 hover:bg-blue-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                Check API Status
              </button>
              <button type="button" id="debug-all-collections" class="inline-flex items-center px-3 py-1.5 border border-transparent text-xs font-medium rounded-md text-purple-700 bg-purple-100 hover:bg-purple-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-500">
                Debug All Collections
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </main>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const testButton = document.getElementById('test-button');
      const downloadButton = document.getElementById('download-test-result');
      const resultsElement = document.getElementById('test-results');
      const requestDetailsElement = document.getElementById('request-details');
      const responseHeadersElement = document.getElementById('response-headers');
      const statusIndicator = document.getElementById('status-indicator');
      const statusText = document.getElementById('status-text');
      
      let testResponseData = null;
      let testResponseType = null;
      
      // Add a GET request to check API status
      fetch('/api/export', { 
        method: 'GET',
        headers: {
          'Accept': 'application/json'
        },
        mode: 'cors',
        cache: 'no-cache'
      })
      .then(response => response.json())
      .then(data => {
        console.log('API Status:', data);
        if (data.status === 'ok') {
          statusIndicator.className = 'w-4 h-4 rounded-full bg-green-500 mr-2';
          statusText.textContent = 'API is online';
          statusText.className = 'text-sm text-green-600';
        }
      })
      .catch(error => {
        console.warn('API Status Check Error:', error);
      });
      
      testButton.addEventListener('click', function() {
        // Reset UI
        statusIndicator.className = 'w-4 h-4 rounded-full bg-yellow-400 mr-2';
        statusText.textContent = 'Testing...';
        statusText.className = 'text-sm text-yellow-600';
        resultsElement.textContent = 'Sending request...';
        requestDetailsElement.textContent = 'Preparing request...';
        responseHeadersElement.textContent = 'Waiting for response...';
        downloadButton.classList.add('hidden');
        document.getElementById('response-stats').classList.add('hidden');
        testResponseData = null;
        
        // Get test configuration
        const apiUrl = document.getElementById('api-url').value;
        const collection = document.getElementById('test-collection').value;
        const format = document.getElementById('test-format').value;
        const includeMetadata = document.getElementById('include-metadata').checked;
        const includeStats = document.getElementById('include-stats').checked;
        
        // Get date range if enabled
        let dateRange = { start: null, end: null };
        if (document.getElementById('use-date-range').checked) {
          const startDate = document.getElementById('date-start').value;
          const endDate = document.getElementById('date-end').value;
          dateRange = {
            start: startDate || null,
            end: endDate || null
          };
        }
        
        // Prepare request data
        const requestData = {
          format: format,
          collections: collection === 'all' ? ['all'] : [collection],
          options: { 
            includeMetadata: includeMetadata, 
            includeStats: includeStats,
            dateRange: dateRange
          }
        };
        
        // Log the request data for debugging
        console.log('Sending request with data:', requestData);
        
        // Update request details
        requestDetailsElement.textContent = `URL: ${window.location.origin}${apiUrl}
Method: POST
Headers: 
Content-Type: application/json
Accept: ${format === 'csv' ? 'text/csv' : 'application/json'}
Body: ${JSON.stringify(requestData, null, 2)}`;
        
        // Ensure we're sending a properly stringified JSON body
        const requestBody = JSON.stringify(requestData);
        
        // Make the request
        const startTime = performance.now();
        
        fetch(apiUrl, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Accept': format === 'csv' ? 'text/csv' : 'application/json'
          },
          body: requestBody,
          mode: 'cors',
          cache: 'no-cache',
          credentials: 'same-origin'
        })
        .then(response => {
          const endTime = performance.now();
          const duration = (endTime - startTime).toFixed(2);
          
          // Store duration for later use
          document.getElementById('stats-time').textContent = `${duration} ms`;
          
          // Display response headers
          const headers = Array.from(response.headers.entries())
            .map(([key, value]) => `${key}: ${value}`)
            .join('\n');
          responseHeadersElement.textContent = `Status: ${response.status} ${response.statusText}\nTime: ${duration}ms\n\n${headers}`;
          
          if (!response.ok) {
            statusIndicator.className = 'w-4 h-4 rounded-full bg-red-500 mr-2';
            statusText.textContent = `Failed: ${response.status} ${response.statusText}`;
            statusText.className = 'text-sm text-red-600';
            
            return response.text().then(text => {
              try {
                // Try to parse as JSON
                const data = JSON.parse(text);
                resultsElement.textContent = JSON.stringify(data, null, 2);
                console.error('API Error Response:', data);
                
                // Add specific error handling for collection issues
                if (data.error && data.error.includes('collection')) {
                  resultsElement.textContent += '\n\nPossible issue: The selected collection may not exist or is empty.';
                  resultsElement.textContent += '\nTry selecting a different collection from the dropdown.';
                }
                
                return { success: false, error: data };
              } catch (e) {
                // If not JSON, show the response text
                resultsElement.textContent = text.length > 2000 
                  ? text.substring(0, 2000) + '... (truncated)'
                  : text;
                console.error('API Error (non-JSON):', text);
                return { success: false, error: text };
              }
            });
          }
          
          // Check response type
          const contentType = response.headers.get('Content-Type');
          
          if (contentType && contentType.includes('application/json')) {
            return response.json().then(data => {
              testResponseData = data;
              testResponseType = 'json';
              return { success: true, data };
            });
          } else if (contentType && contentType.includes('text/csv')) {
            return response.text().then(text => {
              testResponseData = text;
              testResponseType = 'csv';
              return { success: true, text };
            });
          } else {
            return response.text().then(text => {
              testResponseData = text;
              testResponseType = 'text';
              return { success: true, text };
            });
          }
        })
        .then(result => {
          if (result.success) {
            statusIndicator.className = 'w-4 h-4 rounded-full bg-green-500 mr-2';
            statusText.textContent = 'Success!';
            statusText.className = 'text-sm text-green-600';
            
            // Show response stats
            const statsElement = document.getElementById('response-stats');
            statsElement.classList.remove('hidden');
            
            if (result.data) {
              // JSON response
              // Check if we have data for the requested collection
              if (result.data.data) {
                const requestedCollectionData = result.data.data[collection];
                
                if (collection === 'all') {
                  // For 'all' collections, show a summary
                  let summary = "Collections retrieved:\n";
                  for (const [collName, items] of Object.entries(result.data.data)) {
                    summary += `- ${collName}: ${Array.isArray(items) ? items.length : 0} items\n`;
                  }
                  resultsElement.textContent = summary + "\n\nFull response (truncated):\n";
                  
                  // Add the truncated JSON
                  const formattedJson = JSON.stringify(result.data, null, 2);
                  resultsElement.textContent += formattedJson.length > 2000 
                    ? formattedJson.substring(0, 2000) + '... (truncated)'
                    : formattedJson;
                } else if (requestedCollectionData && Array.isArray(requestedCollectionData)) {
                  // Show the specific collection data
                  const formattedJson = JSON.stringify(result.data, null, 2);
                  resultsElement.textContent = `Retrieved ${requestedCollectionData.length} items from ${collection}:\n\n`;
                  resultsElement.textContent += formattedJson.length > 2000 
                    ? formattedJson.substring(0, 2000) + '... (truncated)'
                    : formattedJson;
                } else {
                  // No data for the requested collection
                  resultsElement.textContent = `No data found for collection "${collection}".\n\nAPI Response:\n`;
                  const formattedJson = JSON.stringify(result.data, null, 2);
                  resultsElement.textContent += formattedJson.length > 2000 
                    ? formattedJson.substring(0, 2000) + '... (truncated)'
                    : formattedJson;
                }
              } else {
                // Just show the raw response
                const formattedJson = JSON.stringify(result.data, null, 2);
                resultsElement.textContent = formattedJson.length > 2000 
                  ? formattedJson.substring(0, 2000) + '... (truncated)'
                  : formattedJson;
              }
              
              // Update stats
              let totalItems = 0;
              let collections = [];
              
              // Extract stats from the response
              if (result.data.data) {
                Object.keys(result.data.data).forEach(collectionName => {
                  const items = result.data.data[collectionName];
                  if (Array.isArray(items)) {
                    totalItems += items.length;
                    collections.push(`${collectionName} (${items.length})`);
                  }
                });
              }
              
              // If stats are included in the response
              if (result.data.stats) {
                document.getElementById('stats-total-items').textContent = result.data.stats.totalItems || totalItems;
                document.getElementById('stats-collections').textContent = result.data.stats.collections?.join(', ') || collections.join(', ') || 'None';
              } else {
                document.getElementById('stats-total-items').textContent = totalItems;
                document.getElementById('stats-collections').textContent = collections.join(', ') || 'None';
              }
              
              document.getElementById('stats-format').textContent = 'JSON';
              
              // Calculate response size
              const responseSize = new Blob([JSON.stringify(result.data)]).size;
              const formattedSize = formatFileSize(responseSize);
              document.getElementById('stats-size').textContent = formattedSize;
              
              // Set size bar (max at 5MB)
              const sizePercentage = Math.min(responseSize / (5 * 1024 * 1024) * 100, 100);
              document.getElementById('stats-size-bar').style.width = `${sizePercentage}%`;
              
            } else if (result.text) {
              // Text/CSV response
              resultsElement.textContent = result.text.length > 2000 
                ? result.text.substring(0, 2000) + '... (truncated)'
                : result.text;
              
              // Update stats for CSV
              const lines = result.text.split('\n').length - 1; // -1 for header
              document.getElementById('stats-total-items').textContent = lines;
              document.getElementById('stats-collections').textContent = document.getElementById('test-collection').value;
              document.getElementById('stats-format').textContent = 'CSV';
              
              // Calculate response size
              const responseSize = new Blob([result.text]).size;
              const formattedSize = formatFileSize(responseSize);
              document.getElementById('stats-size').textContent = formattedSize;
              
              // Set size bar (max at 5MB)
              const sizePercentage = Math.min(responseSize / (5 * 1024 * 1024) * 100, 100);
              document.getElementById('stats-size-bar').style.width = `${sizePercentage}%`;
            }
            
            // Show download button
            downloadButton.classList.remove('hidden');
          }
        })
        .catch(error => {
          console.error('API test error:', error);
          
          statusIndicator.className = 'w-4 h-4 rounded-full bg-red-500 mr-2';
          statusText.textContent = 'Error!';
          statusText.className = 'text-sm text-red-600';
          
          resultsElement.textContent = `Error: ${error.message}\n\nThis could indicate a network issue, CORS problem, or server error.`;
          responseHeadersElement.textContent = 'No response headers received due to error';
        });
      });
      
      // Handle download button
      downloadButton.addEventListener('click', function() {
        if (!testResponseData) return;
        
        let fileContent, fileType, fileName;
        
        if (testResponseType === 'json') {
          fileContent = JSON.stringify(testResponseData, null, 2);
          fileType = 'application/json';
          fileName = `api_test_result_${new Date().toISOString().split('T')[0]}.json`;
        } else if (testResponseType === 'csv') {
          fileContent = testResponseData;
          fileType = 'text/csv';
          fileName = `api_test_result_${new Date().toISOString().split('T')[0]}.csv`;
        } else {
          fileContent = testResponseData;
          fileType = 'text/plain';
          fileName = `api_test_result_${new Date().toISOString().split('T')[0]}.txt`;
        }
        
        // Create and download the file
        const blob = new Blob([fileContent], { type: fileType });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = fileName;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
      });

      // Add API status check button functionality
      const checkApiStatusButton = document.getElementById('check-api-status');
      if (checkApiStatusButton) {
        checkApiStatusButton.addEventListener('click', function() {
          statusIndicator.className = 'w-4 h-4 rounded-full bg-yellow-400 mr-2';
          statusText.textContent = 'Checking API status...';
          statusText.className = 'text-sm text-yellow-600';
          resultsElement.textContent = 'Sending GET request to /api/export...';
          
          fetch('/api/export', { 
            method: 'GET',
            headers: {
              'Accept': 'application/json'
            },
            mode: 'cors',
            cache: 'no-cache'
          })
          .then(response => {
            if (!response.ok) {
              throw new Error(`HTTP error! status: ${response.status}`);
            }
            return response.json();
          })
          .then(data => {
            statusIndicator.className = 'w-4 h-4 rounded-full bg-green-500 mr-2';
            statusText.textContent = 'API is online';
            statusText.className = 'text-sm text-green-600';
            
            // Display basic API info
            let resultText = JSON.stringify(data, null, 2);
            
            // Add collection testing buttons if collections are available
            if (data.collections && Array.isArray(data.collections) && data.collections.length > 0) {
              resultText += '\n\n--- Available Collections ---\n';
              
              // Create collection test buttons
              const collectionButtons = document.createElement('div');
              collectionButtons.className = 'mt-4 flex flex-wrap gap-2';
              
              data.collections.forEach(collection => {
                const button = document.createElement('button');
                button.className = 'px-2 py-1 text-xs font-medium rounded bg-blue-100 text-blue-700 hover:bg-blue-200';
                button.textContent = `Test ${collection}`;
                button.addEventListener('click', () => {
                  // Set the collection in the dropdown
                  const collectionSelect = document.getElementById('test-collection');
                  if (collectionSelect) {
                    // Find the option with this value
                    const option = Array.from(collectionSelect.options).find(opt => opt.value === collection);
                    if (option) {
                      collectionSelect.value = collection;
                      // Trigger the simple test
                      document.getElementById('simple-test-button').click();
                    } else {
                      resultsElement.textContent = `Collection "${collection}" not found in dropdown options.`;
                    }
                  }
                });
                collectionButtons.appendChild(button);
              });
              
              // Add a "Test All" button
              const testAllButton = document.createElement('button');
              testAllButton.className = 'px-2 py-1 text-xs font-medium rounded bg-green-100 text-green-700 hover:bg-green-200';
              testAllButton.textContent = 'Test All Collections';
              testAllButton.addEventListener('click', () => {
                const collectionSelect = document.getElementById('test-collection');
                if (collectionSelect) {
                  collectionSelect.value = 'all';
                  document.getElementById('simple-test-button').click();
                }
              });
              collectionButtons.appendChild(testAllButton);
              
              // Add the buttons after the results
              setTimeout(() => {
                const resultsContainer = document.getElementById('test-results').parentNode;
                resultsContainer.appendChild(collectionButtons);
              }, 100);
            }
            
            resultsElement.textContent = resultText;
          })
          .catch(error => {
            statusIndicator.className = 'w-4 h-4 rounded-full bg-red-500 mr-2';
            statusText.textContent = 'API Status Check Failed';
            statusText.className = 'text-sm text-red-600';
            resultsElement.textContent = `Error checking API status: ${error.message}`;
          });
        });
      }

      // Add debug all collections button functionality
      const debugAllCollectionsButton = document.getElementById('debug-all-collections');
      if (debugAllCollectionsButton) {
        debugAllCollectionsButton.addEventListener('click', function() {
          statusIndicator.className = 'w-4 h-4 rounded-full bg-yellow-400 mr-2';
          statusText.textContent = 'Debugging all collections...';
          statusText.className = 'text-sm text-yellow-600';
          resultsElement.textContent = 'Sending debug request for all collections...';
          
          fetch('/api/export?debug=all', { 
            method: 'GET',
            headers: {
              'Accept': 'application/json'
            },
            mode: 'cors',
            cache: 'no-cache'
          })
          .then(response => {
            if (!response.ok) {
              throw new Error(`HTTP error! status: ${response.status}`);
            }
            return response.json();
          })
          .then(data => {
            statusIndicator.className = 'w-4 h-4 rounded-full bg-green-500 mr-2';
            statusText.textContent = 'Collections debug complete';
            statusText.className = 'text-sm text-green-600';
            
            // Format the results in a more readable way
            const collectionsWithData = data.collections.filter(c => c.status === 'ok');
            const emptyCollections = data.collections.filter(c => c.status === 'empty');
            const errorCollections = data.collections.filter(c => c.status === 'error');
            
            let resultHTML = `
              <div class="bg-white p-4 rounded-lg border border-gray-200 mb-4">
                <h3 class="text-lg font-medium text-gray-900 mb-2">Collection Debug Results</h3>
                <div class="grid grid-cols-2 gap-4">
                  <div>
                    <div class="flex items-center mb-2">
                      <div class="w-3 h-3 rounded-full bg-green-500 mr-2"></div>
                      <span class="text-sm text-gray-700">Collections with data: <span class="font-medium">${collectionsWithData.length}</span></span>
                    </div>
                    <div class="flex items-center mb-2">
                      <div class="w-3 h-3 rounded-full bg-yellow-500 mr-2"></div>
                      <span class="text-sm text-gray-700">Empty collections: <span class="font-medium">${emptyCollections.length}</span></span>
                    </div>
                    <div class="flex items-center">
                      <div class="w-3 h-3 rounded-full bg-red-500 mr-2"></div>
                      <span class="text-sm text-gray-700">Error collections: <span class="font-medium">${errorCollections.length}</span></span>
                    </div>
                  </div>
                  <div>
                    <div class="text-sm text-gray-700 mb-2">Total collections: <span class="font-medium">${data.collections.length}</span></div>
                  </div>
                </div>
            `;
            
            // Add collections with data
            if (collectionsWithData.length > 0) {
              resultHTML += `
                <div class="mt-4 pt-4 border-t border-gray-200">
                  <div class="text-sm font-medium text-gray-700 mb-2">Collections with Data:</div>
                  <div class="grid grid-cols-1 sm:grid-cols-2 gap-2">
                    ${collectionsWithData.map(c => `
                      <div class="p-2 bg-green-50 rounded border border-green-200">
                        <div class="font-medium text-green-800">${c.collection} (${c.count} items)</div>
                        <div class="text-xs text-gray-600 mt-1">
                          ${c.hasDataProperty ? '<span class="text-green-600">Has data property</span>' : '<span class="text-yellow-600">No data property</span>'}
                          ${c.hasBodyProperty ? '<span class="text-green-600 ml-2">Has body property</span>' : ''}
                        </div>
                      </div>
                    `).join('')}
                  </div>
                </div>
              `;
            }
            
            // Add empty collections
            if (emptyCollections.length > 0) {
              resultHTML += `
                <div class="mt-4 pt-4 border-t border-gray-200">
                  <div class="text-sm font-medium text-gray-700 mb-2">Empty Collections:</div>
                  <div class="grid grid-cols-1 sm:grid-cols-2 gap-2">
                    ${emptyCollections.map(c => `
                      <div class="p-2 bg-yellow-50 rounded border border-yellow-200">
                        <div class="font-medium text-yellow-800">${c.collection} (empty)</div>
                      </div>
                    `).join('')}
                  </div>
                </div>
              `;
            }
            
            // Add error collections
            if (errorCollections.length > 0) {
              resultHTML += `
                <div class="mt-4 pt-4 border-t border-gray-200">
                  <div class="text-sm font-medium text-gray-700 mb-2">Collections with Errors:</div>
                  <div class="grid grid-cols-1 gap-2">
                    ${errorCollections.map(c => `
                      <div class="p-2 bg-red-50 rounded border border-red-200">
                        <div class="font-medium text-red-800">${c.collection}</div>
                        <div class="text-xs text-red-600 mt-1">${c.error}</div>
                      </div>
                    `).join('')}
                  </div>
                </div>
              `;
            }
            
            resultHTML += `</div>`;
            
            // Display the results
            resultsElement.innerHTML = resultHTML;
          })
          .catch(error => {
            statusIndicator.className = 'w-4 h-4 rounded-full bg-red-500 mr-2';
            statusText.textContent = 'Debug Failed';
            statusText.className = 'text-sm text-red-600';
            resultsElement.textContent = `Error debugging collections: ${error.message}`;
          });
        });
      }

      // Add simple test button functionality
      const simpleTestButton = document.getElementById('simple-test-button');
      if (simpleTestButton) {
        simpleTestButton.addEventListener('click', function() {
          // Reset UI
          statusIndicator.className = 'w-4 h-4 rounded-full bg-yellow-400 mr-2';
          statusText.textContent = 'Testing with minimal request...';
          statusText.className = 'text-sm text-yellow-600';
          resultsElement.textContent = 'Sending minimal request...';
          
          // Get the selected collection from the dropdown
          const selectedCollection = document.getElementById('test-collection').value;
          
          // Create a minimal request with the selected collection
          const minimalRequest = {
            format: 'json',
            collections: selectedCollection === 'all' ? ['all'] : [selectedCollection]
          };
          
          // Update request details
          requestDetailsElement.textContent = `URL: ${window.location.origin}/api/export
Method: POST
Headers: Content-Type: application/json
Body: ${JSON.stringify(minimalRequest, null, 2)}`;
          
          // Make the request with explicit settings
          fetch('/api/export', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(minimalRequest),
            mode: 'cors',
            cache: 'no-cache',
            credentials: 'same-origin'
          })
          .then(response => {
            // Display response headers
            const headers = Array.from(response.headers.entries())
              .map(([key, value]) => `${key}: ${value}`)
              .join('\n');
            responseHeadersElement.textContent = `Status: ${response.status} ${response.statusText}\n\n${headers}`;
            
            if (!response.ok) {
              statusIndicator.className = 'w-4 h-4 rounded-full bg-red-500 mr-2';
              statusText.textContent = `Simple Test Failed: ${response.status}`;
              statusText.className = 'text-sm text-red-600';
            }
            
            return response.text();
          })
          .then(text => {
            try {
              // Try to parse as JSON
              const data = JSON.parse(text);
              
              // Check if we have data for the requested collection
              if (data.data) {
                const requestedCollectionData = data.data[selectedCollection];
                
                if (selectedCollection === 'all') {
                  // For 'all' collections, show a summary
                  let summary = "Collections retrieved:\n";
                  for (const [collection, items] of Object.entries(data.data)) {
                    summary += `- ${collection}: ${Array.isArray(items) ? items.length : 0} items\n`;
                  }
                  resultsElement.textContent = summary + "\n\nFull response:\n" + JSON.stringify(data, null, 2);
                } else if (requestedCollectionData && Array.isArray(requestedCollectionData)) {
                  // Show the specific collection data
                  resultsElement.textContent = `Retrieved ${requestedCollectionData.length} items from ${selectedCollection}:\n\n${JSON.stringify(data, null, 2)}`;
                } else {
                  // No data for the requested collection
                  resultsElement.textContent = `No data found for collection "${selectedCollection}".\n\nAPI Response:\n${JSON.stringify(data, null, 2)}`;
                }
              } else {
                // Just show the raw response
                resultsElement.textContent = JSON.stringify(data, null, 2);
              }
              
              if (data.error) {
                console.error('Simple Test Error:', data);
                statusIndicator.className = 'w-4 h-4 rounded-full bg-red-500 mr-2';
                statusText.textContent = `Error: ${data.error}`;
                statusText.className = 'text-sm text-red-600';
              } else {
                statusIndicator.className = 'w-4 h-4 rounded-full bg-green-500 mr-2';
                statusText.textContent = 'Simple Test Succeeded!';
                statusText.className = 'text-sm text-green-600';
              }
            } catch (e) {
              // If not JSON, show the response text
              resultsElement.textContent = text;
              statusIndicator.className = 'w-4 h-4 rounded-full bg-red-500 mr-2';
              statusText.textContent = 'Error: Invalid JSON response';
              statusText.className = 'text-sm text-red-600';
            }
          })
          .catch(error => {
            console.error('Simple test error:', error);
            statusIndicator.className = 'w-4 h-4 rounded-full bg-red-500 mr-2';
            statusText.textContent = 'Simple Test Error!';
            statusText.className = 'text-sm text-red-600';
            resultsElement.textContent = `Error: ${error.message}`;
          });
        });
      }

      // Helper function to format file size
      function formatFileSize(bytes) {
        if (bytes === 0) return '0 Bytes';
        
        const k = 1024;
        const sizes = ['Bytes', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
      }
      
      // Collection status checker
      const checkCollectionsButton = document.getElementById('check-collections');
      const collectionStatusContainer = document.getElementById('collection-status');
      
      if (checkCollectionsButton && collectionStatusContainer) {
        // Define all collections to check
        const allCollections = [
          'services', 'resources', 'events', 'photos', 'profiles', 
          'talents', 'jobs', 'docs', 'community-voices', 'news', 'pages'
        ];
        
        // Initialize status indicators
        function initCollectionStatus() {
          collectionStatusContainer.innerHTML = '';
          
          allCollections.forEach(collection => {
            const statusElement = document.createElement('div');
            statusElement.className = 'flex items-center justify-between p-2.5 bg-white rounded border border-gray-200 cursor-pointer hover:bg-gray-50 transition-colors';
            statusElement.innerHTML = `
              <div class="flex items-center min-w-0 flex-1">
                <div class="w-3 h-3 rounded-full bg-gray-300 mr-2 flex-shrink-0 status-indicator"></div>
                <span class="text-xs font-medium text-gray-700 truncate status-label">${collection}</span>
              </div>
              <div class="flex-shrink-0 ml-2">
                <button class="debug-btn text-xs text-blue-600 hover:text-blue-800 focus:outline-none px-1.5 py-0.5 hover:bg-blue-50 rounded" title="Debug the '${collection}' collection">Debug</button>
              </div>
            `;
            statusElement.id = `status-${collection}`;
            statusElement.title = `Click to test the "${collection}" collection`;
            
            // Make the status element clickable
            statusElement.addEventListener('click', function(e) {
              // Don't trigger if clicking on the debug button
              if (e.target.classList.contains('debug-btn')) return;
              
              // Update the collection dropdown
              const collectionDropdown = document.getElementById('test-collection');
              if (collectionDropdown) {
                collectionDropdown.value = collection;
                
                // Scroll to the test section
                document.getElementById('test-section').scrollIntoView({ behavior: 'smooth' });
                
                // Highlight the test button briefly
                const testButton = document.getElementById('test-button');
                if (testButton) {
                  testButton.classList.add('ring-2', 'ring-indigo-500', 'ring-offset-2');
                  setTimeout(() => {
                    testButton.classList.remove('ring-2', 'ring-indigo-500', 'ring-offset-2');
                  }, 1500);
                }
              }
            });
            
            // Add debug button functionality
            const debugBtn = statusElement.querySelector('.debug-btn');
            if (debugBtn) {
              debugBtn.addEventListener('click', function(e) {
                e.stopPropagation(); // Prevent triggering the parent click
                
                // Update UI
                statusIndicator.className = 'w-4 h-4 rounded-full bg-yellow-400 mr-2';
                statusText.textContent = `Debugging ${collection} collection...`;
                statusText.className = 'text-sm text-yellow-600';
                resultsElement.textContent = `Sending debug request for ${collection}...`;
                
                // Send debug request
                fetch(`/api/export?debug=${collection}`, {
                  method: 'GET',
                  headers: {
                    'Accept': 'application/json'
                  },
                  mode: 'cors',
                  cache: 'no-cache'
                })
                .then(response => response.json())
                .then(data => {
                  // Update status
                  if (data.status === 'ok') {
                    statusIndicator.className = 'w-4 h-4 rounded-full bg-green-500 mr-2';
                    statusText.textContent = `Debug successful: ${data.message}`;
                    statusText.className = 'text-sm text-green-600';
                  } else {
                    statusIndicator.className = 'w-4 h-4 rounded-full bg-yellow-500 mr-2';
                    statusText.textContent = `Debug warning: ${data.message}`;
                    statusText.className = 'text-sm text-yellow-600';
                  }
                  
                  // Display debug info
                  resultsElement.textContent = JSON.stringify(data, null, 2);
                })
                .catch(error => {
                  statusIndicator.className = 'w-4 h-4 rounded-full bg-red-500 mr-2';
                  statusText.textContent = 'Debug failed';
                  statusText.className = 'text-sm text-red-600';
                  resultsElement.textContent = `Error debugging collection: ${error.message}`;
                });
              });
            }
            
            collectionStatusContainer.appendChild(statusElement);
          });
        }
        
        // Initialize on page load
        initCollectionStatus();
        
        // Auto-check collections on page load after a short delay
        setTimeout(() => {
          checkCollectionsButton.click();
        }, 1000);
        
        // Check collections button functionality
        checkCollectionsButton.addEventListener('click', function() {
          // Reset status indicators
          allCollections.forEach(collection => {
            const statusElement = document.getElementById(`status-${collection}`);
            if (statusElement) {
              const indicator = statusElement.querySelector('.status-indicator');
              if (indicator) {
                indicator.className = 'w-3 h-3 rounded-full bg-yellow-400 mr-2 flex-shrink-0 status-indicator';
              }
              const label = statusElement.querySelector('.status-label');
              if (label) {
                label.className = 'text-xs font-medium text-gray-700 truncate status-label';
              }
            }
          });
          
          // Update button state
          this.disabled = true;
          this.innerHTML = `
            <svg class="animate-spin -ml-1 mr-1 h-4 w-4 text-indigo-700" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
              <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
              <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
            Checking...
          `;
          
          // Use the debug endpoint to check all collections at once
          fetch('/api/export?debug=all', {
            method: 'GET',
            headers: {
              'Accept': 'application/json'
            },
            mode: 'cors',
            cache: 'no-cache'
          })
          .then(response => {
            if (!response.ok) {
              throw new Error(`HTTP error! status: ${response.status}`);
            }
            return response.json();
          })
          .then(data => {
            // Reset button
            this.disabled = false;
            this.innerHTML = 'Check Collections';
            
            if (data.collections && Array.isArray(data.collections)) {
              // Process each collection status
              data.collections.forEach(collectionInfo => {
                const { collection, status, count, error } = collectionInfo;
                const statusElement = document.getElementById(`status-${collection}`);
                
                if (statusElement) {
                  const indicator = statusElement.querySelector('.status-indicator');
                  const label = statusElement.querySelector('.status-label');
                  
                  if (status === 'ok') {
                    // Collection has data
                    if (indicator) indicator.className = 'w-3 h-3 rounded-full bg-green-500 mr-2 flex-shrink-0 status-indicator';
                    if (label) {
                      label.className = 'text-xs font-medium text-green-700 truncate status-label';
                      label.textContent = `${collection} (${count || 0})`;
                    }
                    statusElement.title = `Collection "${collection}" has ${count || 0} items`;
                  } else if (status === 'empty') {
                    // Collection exists but is empty
                    if (indicator) indicator.className = 'w-3 h-3 rounded-full bg-yellow-500 mr-2 flex-shrink-0 status-indicator';
                    if (label) {
                      label.className = 'text-xs font-medium text-yellow-700 truncate status-label';
                      label.textContent = `${collection} (empty)`;
                    }
                    statusElement.title = `Collection "${collection}" exists but contains no data`;
                  } else {
                    // Collection has an error
                    if (indicator) indicator.className = 'w-3 h-3 rounded-full bg-red-500 mr-2 flex-shrink-0 status-indicator';
                    if (label) {
                      label.className = 'text-xs font-medium text-red-700 truncate status-label';
                      label.textContent = `${collection} (error)`;
                    }
                    statusElement.title = `Error accessing collection "${collection}": ${error || 'Unknown error'}`;
                  }
                }
              });
              
              // Count successes
              const successCount = data.collections.filter(r => r.status === 'ok').length;
              const emptyCount = data.collections.filter(r => r.status === 'empty').length;
              const errorCount = data.collections.filter(r => r.status === 'error').length;
              
              // Calculate total items across all collections
              const totalItems = data.collections.reduce((sum, result) => {
                return sum + (result.count || 0);
              }, 0);
              
              // Get collections with data, sorted by item count
              const collectionsWithData = data.collections
                .filter(r => r.status === 'ok' && r.count > 0)
                .sort((a, b) => b.count - a.count);
              
              // Create a list of top collections (up to 3)
              const topCollections = collectionsWithData.slice(0, 3);
              const topCollectionsHTML = topCollections.length > 0 
                ? topCollections.map(c => `<div class="text-sm"><span class="font-medium">${c.collection}</span>: ${c.count} items</div>`).join('')
                : '<div class="text-sm text-gray-500">No collections with data found</div>';
              
              // Show summary in results area
              const summaryHTML = `
<div class="bg-white p-4 rounded-lg border border-gray-200 mb-4">
  <h3 class="text-lg font-medium text-gray-900 mb-2">Collection Status Summary</h3>
  <div class="grid grid-cols-2 gap-4">
    <div>
      <div class="flex items-center mb-2">
        <div class="w-3 h-3 rounded-full bg-green-500 mr-2"></div>
        <span class="text-sm text-gray-700">Available collections: <span class="font-medium">${successCount}</span></span>
      </div>
      <div class="flex items-center mb-2">
        <div class="w-3 h-3 rounded-full bg-yellow-500 mr-2"></div>
        <span class="text-sm text-gray-700">Empty collections: <span class="font-medium">${emptyCount}</span></span>
      </div>
      <div class="flex items-center">
        <div class="w-3 h-3 rounded-full bg-red-500 mr-2"></div>
        <span class="text-sm text-gray-700">Unavailable collections: <span class="font-medium">${errorCount}</span></span>
      </div>
    </div>
    <div>
      <div class="text-sm text-gray-700 mb-2">Total items across all collections: <span class="font-medium">${totalItems}</span></div>
      <div class="text-sm text-gray-700 mb-3">Total collections checked: <span class="font-medium">${data.collections.length}</span></div>
      
      <div class="mt-2">
        <div class="text-sm font-medium text-gray-700 mb-1">Top Collections:</div>
        ${topCollectionsHTML}
      </div>
    </div>
  </div>
  
  ${emptyCount > 0 ? `
  <div class="mt-4 pt-4 border-t border-gray-200">
    <div class="text-sm font-medium text-gray-700 mb-2">Empty Collections:</div>
    <div class="text-sm text-gray-600">
      ${data.collections.filter(r => r.status === 'empty')
        .map(r => `<div class="mb-1"><span class="font-medium">${r.collection}</span>: No data available</div>`)
        .join('')}
    </div>
    <div class="mt-2 text-xs text-gray-500">
      Note: Empty collections may need content files added to their respective directories in <code>src/content/[collection-name]</code>.
    </div>
  </div>
  ` : ''}
  
  ${errorCount > 0 ? `
  <div class="mt-4 pt-4 border-t border-gray-200">
    <div class="text-sm font-medium text-gray-700 mb-2">Collection Errors:</div>
    <div class="text-sm text-gray-600">
      ${data.collections.filter(r => r.status === 'error')
        .map(r => `<div class="mb-1"><span class="font-medium">${r.collection}</span>: ${r.error || 'Unknown error'}</div>`)
        .join('')}
    </div>
  </div>
  ` : ''}
</div>
<div class="text-sm text-gray-600">Click on any collection indicator above to quickly test it.</div>
`;

              // Use innerHTML to render the HTML
              resultsElement.innerHTML = summaryHTML;
              
              // Update status indicator
              if (errorCount === 0) {
                statusIndicator.className = 'w-4 h-4 rounded-full bg-green-500 mr-2';
                statusText.textContent = 'Collections checked successfully';
                statusText.className = 'text-sm text-green-600';
              } else {
                statusIndicator.className = 'w-4 h-4 rounded-full bg-yellow-500 mr-2';
                statusText.textContent = 'Some collections unavailable';
                statusText.className = 'text-sm text-yellow-600';
              }
              
              // DO NOT REPLACE THE DROPDOWN OPTIONS - just update their status
              const collectionDropdown = document.getElementById('test-collection');
              if (collectionDropdown) {
                // Get all options
                const options = Array.from(collectionDropdown.options);
                
                // Update each option based on collection status
                options.forEach(option => {
                  if (option.value === 'all') return; // Skip the "all" option
                  
                  const collectionInfo = data.collections.find(c => c.collection === option.value);
                  if (!collectionInfo) return;
                  
                  if (collectionInfo.status === 'ok') {
                    option.textContent = `${collectionInfo.collection} (${collectionInfo.count || 0} items)`;
                    option.className = 'text-green-800 font-medium';
                    option.disabled = false;
                  } else if (collectionInfo.status === 'empty') {
                    option.textContent = `${collectionInfo.collection} (empty)`;
                    option.className = 'text-yellow-800';
                    option.disabled = false;
                  } else {
                    option.textContent = `${collectionInfo.collection} (unavailable)`;
                    option.className = 'text-red-800';
                    option.disabled = true;
                  }
                });
              }
            } else {
              // No collection data available
              resultsElement.textContent = 'No collection information available from the API.';
              statusIndicator.className = 'w-4 h-4 rounded-full bg-yellow-500 mr-2';
              statusText.textContent = 'Collection check incomplete';
              statusText.className = 'text-sm text-yellow-600';
            }
          })
          .catch(error => {
            // Reset button
            this.disabled = false;
            this.innerHTML = 'Check Collections';
            
            // Show error
            resultsElement.textContent = `Error checking collections: ${error.message}`;
            statusIndicator.className = 'w-4 h-4 rounded-full bg-red-500 mr-2';
            statusText.textContent = 'Collection check failed';
            statusText.className = 'text-sm text-red-600';
          });
        });
      }
    });
  </script>
</MainLayout> 