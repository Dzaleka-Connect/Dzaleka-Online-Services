---
import Layout from '../../layouts/Layout.astro';
import ServiceCard from '../../components/ServiceCard.astro';
import ServiceStats from '../../components/services/ServiceStats.astro';
import ServicePagination from '../../components/services/ServicePagination.astro';
import { getCollection } from 'astro:content';
import { sortServices } from '../../utils/serviceHelpers';
import { calculateServiceStats } from '../../utils/serviceStats';

export async function getStaticPaths({ paginate }) {
  const allServices = await getCollection('services');
  return paginate(allServices, { pageSize: 6 });
}

const { page } = Astro.props;
const allServices = await getCollection('services');

// Calculate service stats
const serviceStats = calculateServiceStats(allServices);
console.log('Service stats:', serviceStats);

// Get URL parameters
const sortBy = Astro.url.searchParams.get('sort') || 'featured';
const verifiedOnly = Astro.url.searchParams.get('verified') === 'true';

// Apply verified filter
let filteredServices = allServices;
if (verifiedOnly) {
  filteredServices = filteredServices.filter(service => service.data.verified);
}

// Sort services
const sortedServices = sortServices(filteredServices, sortBy);

// Pagination
const itemsPerPage = 6;
const totalItems = sortedServices.length;
const totalPages = Math.ceil(totalItems / itemsPerPage);
const currentPage = page.currentPage;
const startIndex = (currentPage - 1) * itemsPerPage;
const endIndex = Math.min(startIndex + itemsPerPage, totalItems);
const paginatedServices = sortedServices.slice(startIndex, endIndex);

// Debug logging
console.log('Paginated services:', paginatedServices.map(service => ({
  title: service.data.title,
  socialMedia: service.data.socialMedia,
  hasWebsite: !!service.data.socialMedia?.website,
  websiteUrl: service.data.socialMedia?.website
})));

// Redirect if page is invalid
if (currentPage < 1) {
  return Astro.redirect('/services');
}
---

<Layout title="Service Directory">
  <main>
    <!-- Hero Section -->
    <div class="bg-gradient-to-r from-primary-600 to-primary-800 px-4 py-16">
      <div class="max-w-3xl mx-auto text-center">
        <h1 class="text-4xl font-bold text-white mb-4">Discover Local Services</h1>
        <p class="text-lg text-white/90 mb-8">
          Find and connect with organizations and services in Dzaleka Refugee Camp
        </p>
      </div>
    </div>

    <!-- Service Stats -->
    <div class="max-w-7xl mx-auto px-4 -mt-8">
      <ServiceStats stats={serviceStats} />
    </div>

    <!-- Main Content -->
    <div class="max-w-7xl mx-auto px-4 py-12">
      <div class="flex justify-between items-center mb-8">
        <div>
          <p class="text-gray-600">
            Showing {startIndex + 1}-{endIndex} of {totalItems} services
          </p>
        </div>

        <!-- Filters -->
        <div class="flex items-center gap-4">
          <label class="flex items-center">
            <input 
              type="checkbox" 
              checked={verifiedOnly}
              class="form-checkbox h-5 w-5 text-primary-600 rounded"
              onchange="window.location.href = new URL(window.location.href).searchParams.set('verified', this.checked).toString()"
            />
            <span class="ml-2 text-gray-700">Verified Only</span>
          </label>
          
          <select 
            class="form-select rounded-lg border-gray-300"
            onchange="window.location.href = new URL(window.location.href).searchParams.set('sort', this.value).toString()"
          >
            <option value="featured" selected={sortBy === 'featured'}>Featured First</option>
            <option value="name" selected={sortBy === 'name'}>Name (A-Z)</option>
            <option value="newest" selected={sortBy === 'newest'}>Recently Updated</option>
          </select>
        </div>
      </div>

      <div class="grid gap-8 md:grid-cols-2 lg:grid-cols-3">
        {paginatedServices.map(service => {
          // Extract all social media data
          const socialMedia = service.data.socialMedia ? {
            ...(service.data.socialMedia.facebook && { facebook: service.data.socialMedia.facebook }),
            ...(service.data.socialMedia.twitter && { twitter: service.data.socialMedia.twitter }),
            ...(service.data.socialMedia.instagram && { instagram: service.data.socialMedia.instagram }),
            ...(service.data.socialMedia.linkedin && { linkedin: service.data.socialMedia.linkedin }),
            ...(service.data.socialMedia.website && { website: service.data.socialMedia.website })
          } : undefined;

          return (
            <ServiceCard 
              title={service.data.title}
              description={service.data.description}
              category={service.data.category}
              featured={service.data.featured}
              verified={service.data.verified}
              href={`/services/${service.slug}`}
              email={service.data.contact?.email}
              phone={service.data.contact?.phone}
              address={service.data.location?.address}
              logo={service.data.logo}
              socialMedia={socialMedia}
            />
          );
        })}
      </div>

      <!-- Pagination -->
      {totalPages > 1 && (
        <div class="mt-12">
          <ServicePagination 
            currentPage={currentPage}
            totalPages={totalPages}
            baseUrl={`/services?${new URLSearchParams({
              ...(verifiedOnly && { verified: 'true' }),
              ...(sortBy !== 'featured' && { sort: sortBy })
            }).toString()}`}
          />
        </div>
      )}
    </div>
  </main>
</Layout>