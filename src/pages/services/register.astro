---
import MainLayout from '../../layouts/MainLayout.astro';
import { serviceCategories } from '../../data/serviceCategories';
import { organizationTypes } from '../../data/organizationTypes';
import RegistrationInfo from '../../components/registration/RegistrationInfo.astro';
---

<MainLayout title="Service Provider Registration">
  <div class="max-w-4xl mx-auto px-4 py-12">
    <div class="mb-12 text-center">
      <h1 class="text-4xl font-bold text-gray-900 mb-4">Service Provider Registration</h1>
      <p class="text-xl text-gray-600">Join our network of service providers in Dzaleka</p>
    </div>

    <RegistrationInfo />

    <form class="space-y-12" id="registrationForm" action="https://formspree.io/f/xqaaajae" method="POST">
      <!-- Hidden fields for uploaded files -->
      <input type="hidden" name="logoUrl" id="logoUrlInput" />
      <input type="hidden" name="certificateUrl" id="certificateUrlInput" />
      <input type="hidden" name="taxDocUrl" id="taxDocUrlInput" />
      <input type="hidden" name="additionalDocsUrls" id="additionalDocsUrlInput" />
      <!-- Organization Information -->
      <section class="bg-white p-8 rounded-lg shadow-sm border border-gray-200">
        <h2 class="text-2xl font-semibold text-gray-900 mb-6">Organization Information</h2>
        <div class="space-y-6">
          <div>
            <label for="orgName" class="block text-sm font-medium text-gray-700 mb-1">Organization Name*</label>
            <input type="text" id="orgName" name="orgName" required
              class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-primary-500 focus:border-primary-500">
          </div>

          <div>
            <label for="orgType" class="block text-sm font-medium text-gray-700 mb-1">Organization Type*</label>
            <select id="orgType" name="orgType" required
              class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-primary-500 focus:border-primary-500">
              <option value="">Select Type</option>
              {organizationTypes.map(type => (
                <option value={type.value}>{type.label}</option>
              ))}
            </select>
          </div>

          <div>
            <label for="orgDescription" class="block text-sm font-medium text-gray-700 mb-1">Organization Description*</label>
            <textarea id="orgDescription" name="orgDescription" rows="4" required
              class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-primary-500 focus:border-primary-500"></textarea>
          </div>

          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Organization Logo</label>
            <div class="mt-1 flex justify-center px-6 pt-5 pb-6 border-2 border-gray-300 border-dashed rounded-md">
              <div class="space-y-1 text-center">
                <svg class="mx-auto h-12 w-12 text-gray-400" stroke="currentColor" fill="none" viewBox="0 0 48 48">
                  <path d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                </svg>
                <div class="flex text-sm text-gray-600">
                  <label for="orgLogo" class="relative cursor-pointer bg-white rounded-md font-medium text-primary-600 hover:text-primary-500">
                    <span>Upload a file</span>
                    <input id="orgLogo" name="orgLogo" type="file" class="sr-only" accept="image/*">
                  </label>
                  <p class="pl-1">or drag and drop</p>
                </div>
                <p class="text-xs text-gray-500">Recommended size: 400x400px, Max size: 2MB</p>
                <p id="logoUploadStatus" class="text-sm"></p>
              </div>
            </div>
          </div>

          <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <label for="email" class="block text-sm font-medium text-gray-700 mb-1">Contact Email*</label>
              <input type="email" id="email" name="email" required
                class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-primary-500 focus:border-primary-500">
            </div>
            <div>
              <label for="phone" class="block text-sm font-medium text-gray-700 mb-1">Contact Phone*</label>
              <input type="tel" id="phone" name="phone" required
                class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-primary-500 focus:border-primary-500">
            </div>
          </div>
        </div>
      </section>

      <!-- Services Details -->
      <section class="bg-white p-8 rounded-lg shadow-sm border border-gray-200">
        <h2 class="text-2xl font-semibold text-gray-900 mb-6">Services Details</h2>
        <div class="space-y-6">
          <div>
            <label for="serviceCategory" class="block text-sm font-medium text-gray-700 mb-1">Primary Service Category*</label>
            <select id="serviceCategory" name="serviceCategory" required
              class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-primary-500 focus:border-primary-500">
              <option value="">Select Category</option>
              {serviceCategories.map(category => (
                <option value={category.value}>{category.label}</option>
              ))}
            </select>
          </div>

          <div>
            <label for="serviceDescription" class="block text-sm font-medium text-gray-700 mb-1">Service Description*</label>
            <textarea id="serviceDescription" name="serviceDescription" rows="4" required
              class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-primary-500 focus:border-primary-500"></textarea>
          </div>

          <div>
            <label class="block text-sm font-medium text-gray-700 mb-3">Service Availability*</label>
            <div class="space-y-2">
              {['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'].map(day => (
                <div class="flex items-center">
                  <input type="checkbox" id={day.toLowerCase()} name="availability" value={day}
                    class="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded">
                  <label for={day.toLowerCase()} class="ml-2 text-sm text-gray-700">{day}</label>
                </div>
              ))}
            </div>
          </div>
        </div>
      </section>

      <!-- Required Documents -->
      <section class="bg-white p-8 rounded-lg shadow-sm border border-gray-200">
        <h2 class="text-2xl font-semibold text-gray-900 mb-6">Required Documents</h2>
        <div class="space-y-6">
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Registration Certificate*</label>
            <div class="mt-1 flex justify-center px-6 pt-5 pb-6 border-2 border-gray-300 border-dashed rounded-md">
              <div class="space-y-1 text-center">
                <svg class="mx-auto h-12 w-12 text-gray-400" stroke="currentColor" fill="none" viewBox="0 0 48 48">
                  <path d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                </svg>
                <div class="flex text-sm text-gray-600">
                  <label for="regCertificate" class="relative cursor-pointer bg-white rounded-md font-medium text-primary-600 hover:text-primary-500">
                    <span>Upload a file</span>
                    <input id="regCertificate" name="regCertificate" type="file" class="sr-only" required accept=".pdf,image/*">
                  </label>
                  <p class="pl-1">or drag and drop</p>
                </div>
                <p class="text-xs text-gray-500">PDF or image format, Max size: 5MB</p>
                <p id="certificateUploadStatus" class="text-sm"></p>
              </div>
            </div>
          </div>

          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Tax Registration Document</label>
            <div class="mt-1 flex justify-center px-6 pt-5 pb-6 border-2 border-gray-300 border-dashed rounded-md">
              <div class="space-y-1 text-center">
                <svg class="mx-auto h-12 w-12 text-gray-400" stroke="currentColor" fill="none" viewBox="0 0 48 48">
                  <path d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                </svg>
                <div class="flex text-sm text-gray-600">
                  <label for="taxDoc" class="relative cursor-pointer bg-white rounded-md font-medium text-primary-600 hover:text-primary-500">
                    <span>Upload a file</span>
                    <input id="taxDoc" name="taxDoc" type="file" class="sr-only" accept=".pdf">
                  </label>
                  <p class="pl-1">or drag and drop</p>
                </div>
                <p class="text-xs text-gray-500">PDF format preferred, Max size: 5MB</p>
                <p id="taxDocUploadStatus" class="text-sm"></p>
              </div>
            </div>
          </div>

          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Additional Supporting Documents</label>
            <div class="mt-1 flex justify-center px-6 pt-5 pb-6 border-2 border-gray-300 border-dashed rounded-md">
              <div class="space-y-1 text-center">
                <svg class="mx-auto h-12 w-12 text-gray-400" stroke="currentColor" fill="none" viewBox="0 0 48 48">
                  <path d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                </svg>
                <div class="flex text-sm text-gray-600">
                  <label for="additionalDocs" class="relative cursor-pointer bg-white rounded-md font-medium text-primary-600 hover:text-primary-500">
                    <span>Upload files</span>
                    <input id="additionalDocs" name="additionalDocs" type="file" class="sr-only" accept=".pdf,image/*" multiple>
                  </label>
                  <p class="pl-1">or drag and drop</p>
                </div>
                <p class="text-xs text-gray-500">PDF or image format, Max size: 5MB each</p>
                <p id="additionalDocsUploadStatus" class="text-sm"></p>
              </div>
            </div>
          </div>
        </div>
      </section>

      <!-- Review and Submit -->
      <section class="bg-white p-8 rounded-lg shadow-sm border border-gray-200">
        <h2 class="text-2xl font-semibold text-gray-900 mb-6">Review</h2>
        <div class="space-y-6">
          <div class="flex justify-end space-x-4">
            <button type="button" id="cancelButton"
              class="px-6 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500">
              Cancel
            </button>
            <button type="submit" id="submitButton"
              class="px-6 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500">
              <span id="submitText">Submit Registration</span>
              <span id="submitSpinner" class="hidden ml-2">Submitting...</span>
            </button>
          </div>
        </div>
      </section>
    </form>

    <!-- Success Message -->
    <div id="successMessage" class="hidden mt-4 rounded-md bg-green-50 p-4">
      <div class="flex">
        <div class="ml-3">
          <p class="text-sm font-medium text-green-800">
            Registration submitted successfully! Redirecting to services page...
          </p>
        </div>
      </div>
    </div>

    <!-- Error Message -->
    <div id="errorMessage" class="hidden mt-4 rounded-md bg-red-50 p-4">
      <div class="flex">
        <div class="ml-3">
          <p class="text-sm font-medium text-red-800">
            Error submitting registration. Please try again.
          </p>
        </div>
      </div>
    </div>
  </div>
</MainLayout>

<script>
  const form = document.getElementById('registrationForm') as HTMLFormElement;
  const submitButton = document.getElementById('submitButton') as HTMLButtonElement;
  const submitText = document.getElementById('submitText') as HTMLElement;
  const submitSpinner = document.getElementById('submitSpinner') as HTMLElement;
  const successMessage = document.getElementById('successMessage') as HTMLElement;
  const errorMessage = document.getElementById('errorMessage') as HTMLElement;
  const cancelButton = document.getElementById('cancelButton') as HTMLButtonElement;

  // File input elements
  const logoInput = document.getElementById('orgLogo') as HTMLInputElement;
  const certificateInput = document.getElementById('regCertificate') as HTMLInputElement;
  const taxDocInput = document.getElementById('taxDoc') as HTMLInputElement;
  const additionalDocsInput = document.getElementById('additionalDocs') as HTMLInputElement;

  // Hidden URL inputs
  const logoUrlInput = document.getElementById('logoUrlInput') as HTMLInputElement;
  const certificateUrlInput = document.getElementById('certificateUrlInput') as HTMLInputElement;
  const taxDocUrlInput = document.getElementById('taxDocUrlInput') as HTMLInputElement;
  const additionalDocsUrlInput = document.getElementById('additionalDocsUrlInput') as HTMLInputElement;

  // Status elements
  const logoUploadStatus = document.getElementById('logoUploadStatus') as HTMLElement;
  const certificateUploadStatus = document.getElementById('certificateUploadStatus') as HTMLElement;
  const taxDocUploadStatus = document.getElementById('taxDocUploadStatus') as HTMLElement;
  const additionalDocsUploadStatus = document.getElementById('additionalDocsUploadStatus') as HTMLElement;

  async function uploadToCloudinary(file: File, statusElement: HTMLElement) {
    statusElement.textContent = 'Uploading...';
    statusElement.classList.remove('text-red-500', 'text-green-500');

    try {
      const formData = new FormData();
      formData.append('file', file);
      formData.append('upload_preset', 'dzaleka_events');

      const response = await fetch(
        'https://api.cloudinary.com/v1_1/dcvwslmow/upload',
        {
          method: 'POST',
          body: formData
        }
      );

      const data = await response.json();
      
      if (data.secure_url) {
        statusElement.textContent = 'Upload successful!';
        statusElement.classList.add('text-green-500');
        return data.secure_url;
      } else {
        throw new Error('Upload failed');
      }
    } catch (error) {
      console.error('Upload error:', error);
      statusElement.textContent = 'Upload failed. Please try again.';
      statusElement.classList.add('text-red-500');
      return null;
    }
  }

  async function handleFileUpload(file: File | null, statusElement: HTMLElement) {
    if (!file) return null;
    return await uploadToCloudinary(file, statusElement);
  }

  async function handleMultipleFileUpload(files: FileList | null, statusElement: HTMLElement) {
    if (!files || files.length === 0) return [];
    
    statusElement.textContent = 'Uploading files...';
    const urls = [];
    
    for (let i = 0; i < files.length; i++) {
      const url = await uploadToCloudinary(files[i], statusElement);
      if (url) urls.push(url);
    }
    
    if (urls.length > 0) {
      statusElement.textContent = `${urls.length} file(s) uploaded successfully!`;
      statusElement.classList.add('text-green-500');
    }
    
    return urls;
  }

  // Add file upload handlers
  logoInput.addEventListener('change', async () => {
    const url = await handleFileUpload(logoInput.files?.[0], logoUploadStatus);
    if (url) logoUrlInput.value = url;
  });

  certificateInput.addEventListener('change', async () => {
    const url = await handleFileUpload(certificateInput.files?.[0], certificateUploadStatus);
    if (url) certificateUrlInput.value = url;
  });

  taxDocInput.addEventListener('change', async () => {
    const url = await handleFileUpload(taxDocInput.files?.[0], taxDocUploadStatus);
    if (url) taxDocUrlInput.value = url;
  });

  additionalDocsInput.addEventListener('change', async () => {
    const urls = await handleMultipleFileUpload(additionalDocsInput.files, additionalDocsUploadStatus);
    if (urls.length > 0) additionalDocsUrlInput.value = JSON.stringify(urls);
  });

  // Form submission
  form.addEventListener('submit', async (e) => {
    e.preventDefault();

    // Check if required files are still uploading
    if (certificateInput.files?.length && !certificateUrlInput.value) {
      alert('Please wait for the registration certificate to finish uploading.');
      return;
    }

    // Show loading state
    submitButton.disabled = true;
    submitText.classList.add('hidden');
    submitSpinner.classList.remove('hidden');

    try {
      // Create a plain object with form data
      const formData = new FormData(form);
      const formJson = Object.fromEntries(formData.entries());

      // Add file URLs
      formJson.logoUrl = logoUrlInput.value || null;
      formJson.certificateUrl = certificateUrlInput.value || null;
      formJson.taxDocUrl = taxDocUrlInput.value || null;
      formJson.additionalDocsUrls = additionalDocsUrlInput.value ? JSON.parse(additionalDocsUrlInput.value) : [];

      const response = await fetch(form.action, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        },
        body: JSON.stringify(formJson)
      });

      const responseData = await response.json();
      console.log('Formspree response:', responseData);

      if (response.ok) {
        successMessage.classList.remove('hidden');
        errorMessage.classList.add('hidden');
        setTimeout(() => {
          window.location.href = '/services';
        }, 2000);
      } else {
        throw new Error(`Submission failed: ${responseData.error || 'Unknown error'}`);
      }
    } catch (error) {
      console.error('Submission error:', error);
      const errorElement = errorMessage.querySelector('p');
      if (errorElement) {
        errorElement.textContent = error.message || 'Error submitting registration. Please try again.';
      }
      successMessage.classList.add('hidden');
      errorMessage.classList.remove('hidden');
      submitButton.disabled = false;
      submitText.classList.remove('hidden');
      submitSpinner.classList.add('hidden');
    }
  });

  cancelButton.addEventListener('click', () => {
    window.location.href = '/services';
  });
</script>
