---
import { getCollection } from 'astro:content';
import MainLayout from '../../layouts/MainLayout.astro';
import JobCard from '../../components/jobs/JobCard.astro';
import JobStats from '../../components/jobs/JobStats.astro';
import { formatDate, isJobExpired } from '../../utils/dateHelpers';

export async function getStaticPaths({ paginate }) {
  const allJobs = await getCollection('jobs');
  
  // Sort jobs based on URL parameter
  const sortedJobs = [...allJobs].sort((a, b) => {
    return new Date(b.data.posted).getTime() - new Date(a.data.posted).getTime();
  });
  
  return paginate(sortedJobs, { pageSize: 6 });
}

const { page } = Astro.props;
const currentSort = Astro.url.searchParams.get('sort') || 'recent';

// Get all jobs
const allJobs = await getCollection('jobs');

// Filter active jobs (not expired and status is open)
const activeJobs = allJobs.filter(job => 
  job.data.status === 'open' && !isJobExpired(job.data.deadline)
);

// Get closed jobs count (either marked as closed or expired)
const closedJobs = allJobs.filter(job => 
  job.data.status === 'closed' || isJobExpired(job.data.deadline)
).length;

// Sort jobs
let sortedJobs = [...page.data];
sortedJobs = sortedJobs.sort((a, b) => {
  if (currentSort === 'recent') {
    return new Date(b.data.posted).getTime() - new Date(a.data.posted).getTime();
  } else {
    return new Date(a.data.deadline).getTime() - new Date(b.data.deadline).getTime();
  }
});

// Get featured jobs
const featuredJobs = allJobs.filter(job => 
  job.data.featured && !isJobExpired(job.data.deadline) && job.data.status === 'open'
);

// Calculate stats
const stats = {
  total: activeJobs.length,
  featured: featuredJobs.length,
  categories: [...new Set(allJobs.map(job => job.data.category))].length,
  organizations: [...new Set(allJobs.map(job => job.data.organization))].length,
  closed: closedJobs
};

// Generate pagination URLs
function getPaginationUrl(pageNum: number) {
  const basePath = '/jobs';
  const queryParams = new URLSearchParams();
  
  if (currentSort && currentSort !== 'recent') {
    queryParams.set('sort', currentSort);
  }
  
  const queryString = queryParams.toString();
  
  if (pageNum === 1) {
    return `${basePath}${queryString ? `?${queryString}` : ''}`;
  }
  
  return `${basePath}/${pageNum}${queryString ? `?${queryString}` : ''}`;
}
---

<MainLayout title="Community Job Board">
  <!-- Hero Section -->
  <div class="bg-gradient-to-r from-primary-600 to-primary-800 py-16">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="text-center">
        <h1 class="text-4xl font-bold tracking-tight text-white sm:text-5xl lg:text-6xl">
          Community Job Board
        </h1>
        <p class="mt-4 text-xl text-primary-100">
          Find opportunities and make a difference in our community
        </p>
        <div class="mt-8 flex flex-wrap justify-center gap-4">
          <a 
            href="/jobs/post" 
            class="inline-flex items-center px-6 py-3 border border-transparent text-base font-medium rounded-md shadow-sm text-primary-700 bg-white hover:bg-primary-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500"
          >
            <svg class="-ml-1 mr-2 h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
              <path fill-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clip-rule="evenodd" />
            </svg>
            Post a Job
          </a>
          <a 
            href="/jobs/about" 
            class="inline-flex items-center px-6 py-3 border border-white text-base font-medium rounded-md text-white hover:bg-white/10 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-white"
          >
            <svg class="-ml-1 mr-2 h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
              <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd" />
            </svg>
            Learn More
          </a>
        </div>
      </div>
    </div>
  </div>

  <!-- Stats Section -->
  <div class="relative">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 -mt-8">
      <div class="bg-white rounded-lg shadow-lg border border-gray-200/50">
        <JobStats stats={stats} />
      </div>
    </div>
  </div>

  <!-- Main Content -->
  <div class="max-w-7xl mx-auto px-4 py-12">
    <div class="lg:grid lg:grid-cols-12 lg:gap-8">
      <!-- Sidebar -->
      <aside class="lg:col-span-3">
        <div class="sticky top-8">
          <div class="bg-white p-6 rounded-lg shadow-sm border border-gray-200/50">
            <h2 class="text-lg font-semibold text-gray-900 mb-4">Sort Jobs</h2>
            <form id="sort-form" class="space-y-4">
              <div class="space-y-4">
                <label class="inline-flex items-center">
                  <input
                    type="radio"
                    name="sort"
                    value="recent"
                    checked={currentSort === 'recent'}
                    class="form-radio h-4 w-4 text-primary-600 focus:ring-primary-500"
                  />
                  <span class="ml-2 text-sm text-gray-700">Most Recent</span>
                </label>
                <label class="inline-flex items-center">
                  <input
                    type="radio"
                    name="sort"
                    value="deadline"
                    checked={currentSort === 'deadline'}
                    class="form-radio h-4 w-4 text-primary-600 focus:ring-primary-500"
                  />
                  <span class="ml-2 text-sm text-gray-700">Deadline</span>
                </label>
              </div>
            </form>
          </div>
        </div>
      </aside>

      <!-- Main Content Area -->
      <main class="mt-8 lg:col-span-9 lg:mt-0">
        {featuredJobs.length > 0 && (
          <div class="mb-8">
            <h2 class="text-2xl font-bold text-gray-900 mb-6">Featured Opportunities</h2>
            <div class="grid gap-6">
              {featuredJobs.map(job => (
                <JobCard 
                  job={job} 
                  featured={true}
                  isExpired={isJobExpired(job.data.deadline)}
                />
              ))}
            </div>
          </div>
        )}

        <div class="mt-8">
          <h2 class="text-2xl font-bold text-gray-900 mb-6">All Opportunities</h2>
          <div class="grid gap-6">
            {sortedJobs.map(job => (
              <JobCard 
                job={job}
                isExpired={isJobExpired(job.data.deadline)}
              />
            ))}
          </div>

          {/* Pagination */}
          {page.lastPage > 1 && (
            <nav class="mt-8 flex items-center justify-center" aria-label="Pagination">
              <div class="flex -space-x-px rounded-md">
                {/* Previous Page */}
                <a
                  href={page.url.prev ? getPaginationUrl(page.currentPage - 1) : '#'}
                  class={`relative inline-flex items-center rounded-l-md px-3 py-2 text-sm font-medium ${
                    !page.url.prev
                      ? 'bg-gray-100 text-gray-400 cursor-not-allowed'
                      : 'bg-white text-gray-500 hover:bg-gray-50'
                  } ring-1 ring-inset ring-gray-300`}
                  aria-disabled={!page.url.prev}
                >
                  <span class="sr-only">Previous</span>
                  <svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clip-rule="evenodd" />
                  </svg>
                </a>

                {/* Page Numbers */}
                {Array.from({ length: page.lastPage }, (_, i) => i + 1).map(pageNum => (
                  <a
                    href={getPaginationUrl(pageNum)}
                    class={`relative inline-flex items-center px-4 py-2 text-sm font-medium ${
                      page.currentPage === pageNum
                        ? 'z-10 bg-primary-600 text-white focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-primary-600'
                        : 'text-gray-900 ring-1 ring-inset ring-gray-300 hover:bg-gray-50'
                    }`}
                    aria-current={page.currentPage === pageNum ? 'page' : undefined}
                  >
                    {pageNum}
                  </a>
                ))}

                {/* Next Page */}
                <a
                  href={page.url.next ? getPaginationUrl(page.currentPage + 1) : '#'}
                  class={`relative inline-flex items-center rounded-r-md px-3 py-2 text-sm font-medium ${
                    !page.url.next
                      ? 'bg-gray-100 text-gray-400 cursor-not-allowed'
                      : 'bg-white text-gray-500 hover:bg-gray-50'
                  } ring-1 ring-inset ring-gray-300`}
                  aria-disabled={!page.url.next}
                >
                  <span class="sr-only">Next</span>
                  <svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
                  </svg>
                </a>
              </div>
            </nav>
          )}

          {sortedJobs.length === 0 && (
            <div class="text-center py-12">
              <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M12 12h.01M12 12h.01M12 12h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
              <h3 class="mt-2 text-sm font-semibold text-gray-900">No jobs found</h3>
              <p class="mt-1 text-sm text-gray-500">Check back later for new opportunities.</p>
            </div>
          )}
        </div>
      </main>
    </div>
  </div>
</MainLayout>

<script>
  // Function to handle form submission with client-side navigation
  function handleSort(value: string) {
    const url = new URL(window.location.href);
    if (value === 'recent') {
      url.searchParams.delete('sort');
    } else {
      url.searchParams.set('sort', value);
    }
    window.location.href = url.toString();
  }

  // Add event listeners to radio buttons
  document.querySelectorAll('input[name="sort"]').forEach((radio) => {
    radio.addEventListener('change', (e) => {
      const target = e.target as HTMLInputElement;
      handleSort(target.value);
    });
  });
</script>
