---
import { getCollection } from 'astro:content';
import MainLayout from '../../layouts/MainLayout.astro';
import JobCard from '../../components/jobs/JobCard.astro';
import JobFilters from '../../components/jobs/JobFilters.astro';
import JobStats from '../../components/jobs/JobStats.astro';
import { formatDate, isJobExpired } from '../../utils/dateHelpers';

// Get URL parameters
const url = Astro.url;
const currentType = url.searchParams.get('type');
const currentCategory = url.searchParams.get('category');
const currentPage = parseInt(url.searchParams.get('page') || '1');
const currentSort = url.searchParams.get('sort') || 'recent';

// Get all jobs
let allJobs = await getCollection('jobs');

// Filter active jobs (not expired and status is open)
const activeJobs = allJobs.filter(job => 
  job.data.status === 'open' && !isJobExpired(job.data.deadline)
);

// Get closed jobs count (either marked as closed or expired)
const closedJobs = allJobs.filter(job => 
  job.data.status === 'closed' || isJobExpired(job.data.deadline)
).length;

// Apply filters
if (currentType) {
  allJobs = allJobs.filter(job => job.data.type === currentType);
}
if (currentCategory) {
  allJobs = allJobs.filter(job => job.data.category === currentCategory);
}

// Sort jobs
allJobs = allJobs.sort((a, b) => {
  if (currentSort === 'recent') {
    return new Date(b.data.posted).getTime() - new Date(a.data.posted).getTime();
  } else {
    return new Date(a.data.deadline).getTime() - new Date(b.data.deadline).getTime();
  }
});

// Get featured jobs
const featuredJobs = allJobs.filter(job => 
  job.data.featured && !isJobExpired(job.data.deadline) && job.data.status === 'open'
);

// Calculate stats
const totalJobs = activeJobs.length;
const organizations = new Set(activeJobs.map(job => job.data.organization)).size;
const categories = new Set(activeJobs.map(job => job.data.category)).size;

// Pagination
const jobsPerPage = 8;
const totalPages = Math.ceil(allJobs.length / jobsPerPage);
const startIndex = (currentPage - 1) * jobsPerPage;
const endIndex = startIndex + jobsPerPage;
const paginatedJobs = allJobs.slice(startIndex, endIndex);

// Function to build URL with parameters
function buildUrl(params: Record<string, string | null>) {
  const newUrl = new URL(Astro.url);
  Object.entries(params).forEach(([key, value]) => {
    if (value === null) {
      newUrl.searchParams.delete(key);
    } else {
      newUrl.searchParams.set(key, value);
    }
  });
  return newUrl.toString();
}
---

<MainLayout title="Community Job Board">
  <!-- Hero Section with Background Image -->
  <div class="relative bg-gray-900">
    <!-- Background Image -->
    <div class="absolute inset-0">
      <img 
        src="/images/dzaleka-hero.jpeg" 
        alt="Dzaleka Community" 
        class="w-full h-full object-cover opacity-30"
      />
      <div class="absolute inset-0 bg-gradient-to-r from-primary-900/90 to-primary-800/90 mix-blend-multiply"></div>
    </div>

    <!-- Content -->
    <div class="relative">
      <div class="max-w-7xl mx-auto px-4 py-12 sm:py-16 lg:py-20">
        <div class="text-center">
          <h1 class="text-4xl sm:text-5xl lg:text-6xl font-bold text-white mb-6 tracking-tight">
            Community Job Board
          </h1>
          <p class="text-xl sm:text-2xl text-primary-100 mb-8 max-w-3xl mx-auto">
            Find opportunities and connect with organizations in Dzaleka. Together, we build a stronger community.
          </p>
          <div class="flex flex-wrap justify-center gap-4">
            <a 
              href="/jobs/post" 
              class="inline-flex items-center px-6 py-3 border border-transparent rounded-md shadow-sm text-base font-medium text-primary-600 bg-white hover:bg-primary-50 transition-colors"
            >
              <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
              </svg>
              Post a Job
            </a>
            <a 
              href="/jobs/about" 
              class="inline-flex items-center px-6 py-3 border border-white rounded-md text-base font-medium text-white hover:bg-white/10 transition-colors"
            >
              <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
              Learn More
            </a>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Job Stats -->
  <div class="relative">
    <div class="max-w-7xl mx-auto px-4 -mt-8 sm:-mt-12 relative z-10">
      <div class="bg-white shadow-xl rounded-lg border border-gray-200/50">
        <JobStats 
          stats={{
            total: totalJobs,
            featured: featuredJobs.length,
            categories,
            organizations,
            closed: closedJobs
          }} 
        />
      </div>
    </div>
  </div>

  <!-- Main Content -->
  <div class="max-w-7xl mx-auto px-4 py-12">
    <div class="lg:grid lg:grid-cols-12 lg:gap-8">
      <!-- Sidebar -->
      <aside class="lg:col-span-3">
        <div class="sticky top-8 space-y-6">
          <div class="bg-white p-6 rounded-lg shadow-sm border border-gray-200/50">
            <h2 class="text-lg font-semibold text-gray-900 mb-4">Filters</h2>
            <JobFilters />
          </div>
        </div>
      </aside>

      <!-- Job Listings -->
      <main class="lg:col-span-9 mt-8 lg:mt-0">
        {featuredJobs.length > 0 && (
          <div class="mb-8">
            <h2 class="text-xl font-semibold text-gray-900 mb-4">Featured Opportunities</h2>
            <div class="grid gap-4">
              {featuredJobs.map(job => (
                <JobCard 
                  job={job} 
                  featured={true} 
                  isExpired={isJobExpired(job.data.deadline)} 
                />
              ))}
            </div>
          </div>
        )}

        <div class="mb-6">
          <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
            <p class="text-gray-600">
              Showing {startIndex + 1}-{endIndex} of {totalJobs} jobs
            </p>
            <div class="flex items-center gap-2">
              <label for="sort-select" class="text-sm text-gray-600">Sort by:</label>
              <select 
                id="sort-select"
                class="form-select rounded-lg border-gray-300 text-sm"
              >
                <option value="recent" selected={currentSort === 'recent'}>Most Recent</option>
                <option value="deadline" selected={currentSort === 'deadline'}>Deadline</option>
              </select>
            </div>
          </div>
        </div>

        <div class="grid gap-4">
          {paginatedJobs.map(job => (
            <JobCard 
              job={job} 
              isExpired={isJobExpired(job.data.deadline)} 
            />
          ))}
        </div>

        {totalPages > 1 && (
          <div class="mt-8 flex justify-center">
            <nav class="relative z-0 inline-flex rounded-md shadow-sm -space-x-px" aria-label="Pagination">
              {Array.from({ length: totalPages }, (_, i) => (
                <a
                  href={buildUrl({
                    page: (i + 1).toString(),
                    category: currentCategory,
                    type: currentType,
                    sort: currentSort
                  })}
                  class:list={[
                    'relative inline-flex items-center px-4 py-2 border text-sm font-medium',
                    currentPage === i + 1
                      ? 'z-10 bg-primary-50 border-primary-500 text-primary-600'
                      : 'bg-white border-gray-300 text-gray-500 hover:bg-gray-50'
                  ]}
                >
                  {i + 1}
                </a>
              ))}
            </nav>
          </div>
        )}

        {paginatedJobs.length === 0 && (
          <div class="text-center py-12">
            <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M12 12h.01M12 12h.01M12 12h.01M12 12h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
            <h3 class="mt-2 text-sm font-medium text-gray-900">No jobs found</h3>
            <p class="mt-1 text-sm text-gray-500">Try adjusting your filters or search criteria.</p>
          </div>
        )}
      </main>
    </div>
  </div>
</MainLayout>

<script>
  // Function to update URL and refresh page
  function updateUrlAndRefresh(params: Record<string, string | null>) {
    const url = new URL(window.location.href);
    Object.entries(params).forEach(([key, value]) => {
      if (value === null) {
        url.searchParams.delete(key);
      } else {
        url.searchParams.set(key, value);
      }
    });
    window.location.href = url.toString();
  }

  // Handle sort select
  const sortSelect = document.getElementById('sort-select') as HTMLSelectElement;
  if (sortSelect) {
    sortSelect.addEventListener('change', () => {
      updateUrlAndRefresh({
        sort: sortSelect.value,
        page: '1' // Reset to first page when changing sort
      });
    });
  }
</script>